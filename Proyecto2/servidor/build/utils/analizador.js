/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,25],$V1=[1,24],$V2=[1,30],$V3=[1,31],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,33],$V8=[1,39],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[1,38],$Ve=[1,41],$Vf=[1,42],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[2,5,27,29,36,41,42,43,50,51,53,54,60,63,64,65,96,97,98,99,100,107,108],$Vk=[1,50],$Vl=[1,63],$Vm=[1,57],$Vn=[1,56],$Vo=[1,55],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[2,98],$VC=[1,73],$VD=[1,78],$VE=[28,38,101],$VF=[29,34,45,48],$VG=[1,88],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[1,99],$VQ=[1,100],$VR=[1,101],$VS=[1,102],$VT=[1,103],$VU=[1,104],$VV=[28,34,46,50,58,68,69,70,71,72,73,74,75,76,77,78,79,80,81,101],$VW=[2,77],$VX=[1,109],$VY=[1,108],$VZ=[28,34,46,50,58,68,69,74,75,76,77,78,79,80,81,101],$V_=[1,172],$V$=[1,174],$V01=[34,50,101],$V11=[2,5,27,29,32,36,41,42,43,50,51,53,54,60,63,64,65,69,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,107,108],$V21=[29,32,69,82,83,84,85,86,87,88,89,90,91,92,93,94],$V31=[28,34,46,50,58,68,69,70,71,73,74,75,76,77,78,79,80,81,101],$V41=[28,34,46,50,58,78,79,80,81,101],$V51=[28,34,46,50,58,80,81,101],$V61=[1,207],$V71=[34,101],$V81=[50,107,108],$V91=[2,5,27,29,36,41,42,43,50,51,53,54,60,63,64,65,96,97,98,99,100,105,107,108],$Va1=[50,101],$Vb1=[2,5,27,29,36,41,42,43,50,51,53,54,60,63,64,65,96,97,98,99,100,104,105,107,108];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"INSTRUCCION_ASIGNACION":7,"INSTRUCCION_BREAK":8,"INSTRUCCION_CONTINUE":9,"INSTRUCCION_RETURN":10,"INSTRUCCION_PUSH":11,"INSTRUCCION_POP":12,"INSTRUCCION_RUN":13,"INSTRUCCION_DECLARACION":14,"INSTRUCCION_DECLARAMATRIZ":15,"INSTRUCCION_DECLARAVECTOR":16,"INSTRUCCION_FUNCION":17,"INSTRUCCION_DOUNTIL":18,"INSTRUCCION_DOWHILE":19,"INSTRUCCION_FOR":20,"INSTRUCCION_IF":21,"INSTRUCCION_PRINT":22,"INSTRUCCION_PRINTLN":23,"INSTRUCCION_SWITCH":24,"INSTRUCCION_WHILE":25,"INSTRUCCION_LLAMADA":26,"INVALID":27,"PTOCOMA":28,"ID":29,"PTO":30,"RPUSH":31,"PARA":32,"VALORES":33,"PARC":34,"RPOP":35,"RRUN":36,"LISTA_IDS":37,"IGUAL":38,"EXPRESION":39,"CASTEO":40,"RBREAK":41,"RCONTINUE":42,"RRETURN":43,"TIPO_DATO":44,"CORA":45,"CORC":46,"RNEW":47,"LLAVEA":48,"VALORES_MATRIX":49,"LLAVEC":50,"RDO":51,"RUNTIL":52,"RWHILE":53,"RFOR":54,"FOR_INICIO":55,"FOR_INCREMENTO":56,"PARAMETROS":57,"DOSPUNTOS":58,"TIPO_FUN":59,"RIF":60,"LISTA_ELIFS":61,"INST_ELSE":62,"RPRINT":63,"RPRINTLN":64,"RSWITCH":65,"CASES_LIST":66,"INST_DEFAULT":67,"MAS":68,"MENOS":69,"POR":70,"DIVIDIDO":71,"POTENCIA":72,"MOD":73,"MAYOR":74,"MAYORO":75,"MENOR":76,"MENORO":77,"ESIGUAL":78,"ESDIFERENTE":79,"OR":80,"AND":81,"NOT":82,"ENTERO":83,"DECIMAL":84,"CADENA":85,"CHAR":86,"BOOLEAN":87,"RTOLOWER":88,"RTOUPPER":89,"RROUND":90,"RLENGTH":91,"RTYPEOF":92,"RTOSTRING":93,"RTOCHARARRAY":94,"RVOID":95,"RINT":96,"RDOUBLE":97,"RSTRING":98,"RCHAR":99,"RBOOLEAN":100,"COMA":101,"IDS":102,"ELIFS":103,"RELIF":104,"RELSE":105,"ELCASE":106,"RCASE":107,"RDEFAULT":108,"FUNCION_INCREMENTO":109,"FUNCION_DECREMENTO":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",27:"INVALID",28:"PTOCOMA",29:"ID",30:"PTO",31:"RPUSH",32:"PARA",34:"PARC",35:"RPOP",36:"RRUN",38:"IGUAL",41:"RBREAK",42:"RCONTINUE",43:"RRETURN",45:"CORA",46:"CORC",47:"RNEW",48:"LLAVEA",50:"LLAVEC",51:"RDO",52:"RUNTIL",53:"RWHILE",54:"RFOR",58:"DOSPUNTOS",60:"RIF",63:"RPRINT",64:"RPRINTLN",65:"RSWITCH",68:"MAS",69:"MENOS",70:"POR",71:"DIVIDIDO",72:"POTENCIA",73:"MOD",74:"MAYOR",75:"MAYORO",76:"MENOR",77:"MENORO",78:"ESIGUAL",79:"ESDIFERENTE",80:"OR",81:"AND",82:"NOT",83:"ENTERO",84:"DECIMAL",85:"CADENA",86:"CHAR",87:"BOOLEAN",88:"RTOLOWER",89:"RTOUPPER",90:"RROUND",91:"RLENGTH",92:"RTYPEOF",93:"RTOSTRING",94:"RTOCHARARRAY",95:"RVOID",96:"RINT",97:"RDOUBLE",98:"RSTRING",99:"RCHAR",100:"RBOOLEAN",101:"COMA",104:"RELIF",105:"RELSE",107:"RCASE",108:"RDEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[11,7],[12,6],[13,2],[7,4],[7,5],[8,2],[9,2],[10,3],[10,2],[15,16],[15,11],[16,11],[16,9],[14,3],[14,5],[14,6],[18,9],[19,9],[20,10],[17,9],[17,8],[26,4],[26,5],[21,9],[22,5],[23,5],[24,8],[25,7],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,2],[39,3],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,4],[39,7],[39,3],[39,4],[39,4],[39,4],[39,4],[39,4],[39,4],[39,4],[39,4],[59,1],[59,1],[44,1],[44,1],[44,1],[44,1],[44,1],[37,3],[37,1],[102,1],[102,4],[40,3],[49,5],[49,3],[33,3],[33,1],[57,4],[57,2],[61,1],[61,0],[103,8],[103,7],[62,4],[62,0],[66,2],[66,0],[106,4],[67,3],[67,0],[55,1],[55,4],[56,1],[56,1],[56,3],[109,3],[110,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        let cons = "";
        let raiz = `"raiz"[label = "RAIZ"];\n`;
        try{
            for(let i = 0; i < $$[$0-1].length; i++){
                raiz += `"raiz" -> ${$$[$0-1][i][1][0]}`;
            }
        }catch(err){
            console.log(err);
        }
        Controller.ast = raiz + Controller.ast
        return $$[$0-1];
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$ = [$$[$0]];
    
break;
case 4:
 
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTASIG"[label = "INST ASIGNACION"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTASIG" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTASIG"`]];
    
break;
case 5:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTBREAK"[label = "INST BREAK"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTBREAK" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTBREAK"`]];
    
break;
case 6:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTCONTI"[label = "INST CONTINUE"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTCONTI" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTCONTI"`]];
    
break;
case 7:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTRETURN"[label = "INST RETURN"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTRETURN" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTRETURN"`]];
    
break;
case 8:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTPUSH"[label = "INST PUSH"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTPUSH" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTPUSH"`]];
    
break;
case 9:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTPOP"[label = "INST POP"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTPOP" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTPOP"`]];
    
break;
case 10:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTRUN"[label = "INST RUN"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTRUN" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTRUN"`]];
    
break;
case 11:
 
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDEC"[label = "INST DECLARACION"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDEC" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTDEC"`]];
    
break;
case 12:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDECMAT"[label = "INST DECLARACION\nMATRIZ"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDECMAT" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTDECMAT"`]];
    
break;
case 13:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDECVECTOR"[label = "INST DECLARACION\nVECTOR"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDECVECTOR" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTDECVECTOR"`]];
    
break;
case 14:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDECFUN"[label = "INST DEC. FUNC."];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDECFUN" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTDECFUN"`]];
    
break;
case 15:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDOU"[label = "INST DO UNTIL"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDOU" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTDOU"`]];
    
break;
case 16:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDOW"[label = "INST DO WHILE"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDOW" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTDOW"`]];
    
break;
case 17:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTRFOR"[label = "INST FOR"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTRFOR" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTRFOR"`]];
    
break;
case 18:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTRIF"[label = "INST IF"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTRIF" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTRIF"`]];
    
break;
case 19:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTPRINT"[label = "INST PRINT"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTPRINT" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTPRINT"`]];
    
break;
case 20:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTPRINTLN"[label = "INST PRINTLN"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTPRINTLN" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTPRINTLN"`]];
    
break;
case 21:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTSWITCH"[label = "INST SWITCH"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTSWITCH" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTSWITCH"`]];
    
break;
case 22:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTWHILE"[label = "INST WHILE"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTWHILE" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTWHILE"`]];
    
break;
case 23:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTLLAMADA"[label = "INST LLAMADA"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTLLAMADA" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [$$[$0],[`"${_$[$0].first_line}${_$[$0].first_column}INSTLLAMADA"`]];
    
break;
case 24:

        Controller.lexical_errors.push(new LexError.default($$[$0], Math.round(this._$.first_line), _$[$0].first_column));
    
break;
case 25:

        Controller.sintax_errors.push(new SintaxError.default($$[$0-1], Math.round(this._$.first_line), _$[$0-1].first_column, "RECOVER WITH ;"));
    
break;
case 26:

        Controller.sintax_errors.push(new SintaxError.default($$[$0], Math.round(this._$.first_line), _$[$0].first_column, "IRRECUPERABLE"));
    
break;
case 27:

        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PUSH"[label = "${$$[$0-6]}"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}PUSH"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}PUSH"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}PUSH"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}PUSH"[label = "VALORES"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}PUSH" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}PUSH"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PUSH"[label = "${$$[$0]}"];\n`;
        this.$ = [[], [
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}PUSH"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}PUSH"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}PUSH"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}PUSH"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}PUSH"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}PUSH"`,
            `"${_$[$0].first_line}${_$[$0].first_column}PUSH"`
        ]];
    
break;
case 28:

        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}POP"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}POP"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}POP"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}POP"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}POP"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}POP"[label = "${$$[$0]}"];\n`;
        this.$ = [[], [
            `"${_$[$0-5].first_line}${_$[$0-5].first_column}POP"`, `"${_$[$0-4].first_line}${_$[$0-4].first_column}POP"`,
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}POP"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}POP"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}POP"`, `"${_$[$0].first_line}${_$[$0].first_column}POP"`
        ]];
    
break;
case 29:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}RUN"[label = "${$$[$0-1]}"];\n`;
        let auxrun = [`"${_$[$0-1].first_line}${_$[$0-1].first_column}RUN"`];
        auxrun = auxrun.concat($$[$0][1]);
        this.$ = [[],auxrun];
    
break;
case 30:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}ASIGNACION"[label = "LISTA IDS"];\n`;
        for(let i = 0; i < $$[$0-3][1].length; i++){
            Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}ASIGNACION" -> ${$$[$0-3][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}ASIGNACION"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ASIGNACION"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ASIGNACION" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}ASIGNACION"[label = "${$$[$0]}"];\n`;
        let ast4 = [`"${_$[$0-3].first_line}${_$[$0-3].first_column}ASIGNACION"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}ASIGNACION"`,
        `"${_$[$0-1].first_line}${_$[$0-1].first_column}ASIGNACION"`, `"${_$[$0].first_line}${_$[$0].first_column}ASIGNACION"`]
        this.$ = [new Assignment.default($$[$0-3][0], $$[$0-1][0], Math.round(this._$.first_line), _$[$0-3].first_column), ast4];
    
break;
case 31:

        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}ASIGNACION"[label = "LISTA IDS"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
            Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}ASIGNACION" -> ${$$[$0-4][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}ASIGNACION"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}ASIGNACION"[label = "CASTEO"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}ASIGNACION" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ASIGNACION"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ASIGNACION" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}ASIGNACION"[label = "${$$[$0]}"];\n`;
        let ast41 = [`"${_$[$0-4].first_line}${_$[$0-4].first_column}ASIGNACION"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}ASIGNACION"`,
        `"${_$[$0-2].first_line}${_$[$0-2].first_column}ASIGNACION"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}ASIGNACION"`,
        `"${_$[$0].first_line}${_$[$0].first_column}ASIGNACION"`]
        let cast1 = new CastExpression.default($$[$0-1][0], $$[$0-2][0], Math.round(this._$.first_line), _$[$0-4].first_column);
        this.$ = [new Assignment.default($$[$0-4][0], cast1, Math.round(this._$.first_line), _$[$0-4].first_column), ast41];
    
break;
case 32:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}BREAK"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}BREAK"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}BREAK"`, `"${_$[$0].first_line}${_$[$0].first_column}BREAK"`
        ]];
    
break;
case 33:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}CONTINUE"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}CONTINUE"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}CONTINUE"`, `"${_$[$0].first_line}${_$[$0].first_column}CONTINUE"`
        ]];
    
break;
case 34:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}RETURN"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}RETURN"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}RETURN" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0].first_column}RETURN"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}RETURN"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}RETURN"`,
            `"${_$[$0].first_line}${_$[$0].first_column}RETURN"`
        ]];
    
break;
case 35:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}RETURN"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}RETURN"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}RETURN"`, `"${_$[$0].first_line}${_$[$0].first_column}RETURN"`
        ]];
    
break;
case 36:

        Controller.ast += `"${_$[$0-15].first_line}${_$[$0-15].first_column}DECMAT"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-15][1].length; i++){
            Controller.ast += `"${_$[$0-15].first_line}${_$[$0-15].first_column}DECMAT" -> ${$$[$0-15][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-14].first_line}${_$[$0-14].first_column}DECMAT"[label = "["];\n`;
        Controller.ast += `"${_$[$0-13].first_line}${_$[$0-13].first_column}DECMAT"[label = "]"];\n`;
        Controller.ast += `"${_$[$0-12].first_line}${_$[$0-12].first_column}DECMAT"[label = "["];\n`;
        Controller.ast += `"${_$[$0-11].first_line}${_$[$0-11].first_column}DECMAT"[label = "]"];\n`;
        Controller.ast += `"${_$[$0-10].first_line}${_$[$0-10].first_column}DECMAT"[label = "${$$[$0-10]}"];\n`;
        Controller.ast += `"${_$[$0-9].first_line}${_$[$0-9].first_column}DECMAT"[label = "="];\n`;
        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}DECMAT"[label = "${$$[$0-8]}"];\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECMAT"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-7][1].length; i++){
            Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECMAT" -> ${$$[$0-7][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECMAT"[label = "["];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECMAT"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-5][1].length; i++){
            Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECMAT" -> ${$$[$0-5][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECMAT"[label = "]"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECMAT"[label = "["];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECMAT"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECMAT" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECMAT"[label = "]"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DECMAT"[label = ";"];\n`;
        this.$ = [[],[
            `"${_$[$0-15].first_line}${_$[$0-15].first_column}DECMAT"`, `"${_$[$0-14].first_line}${_$[$0-14].first_column}DECMAT"`,
            `"${_$[$0-13].first_line}${_$[$0-13].first_column}DECMAT"`, `"${_$[$0-12].first_line}${_$[$0-12].first_column}DECMAT"`,
            `"${_$[$0-11].first_line}${_$[$0-11].first_column}DECMAT"`, `"${_$[$0-10].first_line}${_$[$0-10].first_column}DECMAT"`,
            `"${_$[$0-9].first_line}${_$[$0-9].first_column}DECMAT"`, `"${_$[$0-8].first_line}${_$[$0-8].first_column}DECMAT"`,
            `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECMAT"`, `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECMAT"`,
            `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECMAT"`, `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECMAT"`,
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECMAT"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECMAT"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECMAT"`, `"${_$[$0].first_line}${_$[$0].first_column}DECMAT"`]];

    
break;
case 37:

        Controller.ast += `"${_$[$0-10].first_line}${_$[$0-10].first_column}DECMAT"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-10][1].length; i++){
            Controller.ast += `"${_$[$0-10].first_line}${_$[$0-10].first_column}DECMAT" -> ${$$[$0-10][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-9].first_line}${_$[$0-9].first_column}DECMAT"[label = "["];\n`;
        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}DECMAT"[label = "]"];\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECMAT"[label = "["];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECMAT"[label = "]"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECMAT"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECMAT"[label = "="];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECMAT"[label = "{"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECMAT"[label = "VALORES MATRIX"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECMAT" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECMAT"[label = "}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DECMAT"[label = ";"];\n`;
        this.$ = [[],[
            `"${_$[$0-10].first_line}${_$[$0-10].first_column}DECMAT"`, `"${_$[$0-9].first_line}${_$[$0-9].first_column}DECMAT"`,
            `"${_$[$0-8].first_line}${_$[$0-8].first_column}DECMAT"`, `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECMAT"`,
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECMAT"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECMAT"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECMAT"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECMAT"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECMAT"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECMAT"`,
            `"${_$[$0].first_line}${_$[$0].first_column}DECMAT"`]];

    
break;
case 38:

        Controller.ast += `"${_$[$0-10].first_line}${_$[$0-10].first_column}INSTDECVEC"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-10][1].length; i++){
            Controller.ast += `"${_$[$0-10].first_line}${_$[$0-10].first_column}INSTDECVEC" -> ${$$[$0-10][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-9].first_line}${_$[$0-9].first_column}INSTDECVEC"[label = "["];\n`;
        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}INSTDECVEC"[label = "]"];\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}INSTDECVEC"[label = "${$$[$0-7]}"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}INSTDECVEC"[label = "="];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}INSTDECVEC"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}INSTDECVEC"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
            Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}INSTDECVEC" -> ${$$[$0-4][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}INSTDECVEC"[label = "["];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INSTDECVEC"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INSTDECVEC" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}INSTDECVEC"[label = "]"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDECVEC"[label = ";"];\n`;
        this.$ = [[],[
            `"${_$[$0-10].first_line}${_$[$0-10].first_column}INSTDECVEC"`, `"${_$[$0-9].first_line}${_$[$0-9].first_column}INSTDECVEC"`,
            `"${_$[$0-8].first_line}${_$[$0-8].first_column}INSTDECVEC"`, `"${_$[$0-7].first_line}${_$[$0-7].first_column}INSTDECVEC"`,
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}INSTDECVEC"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}INSTDECVEC"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}INSTDECVEC"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}INSTDECVEC"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}INSTDECVEC"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}INSTDECVEC"`,
            `"${_$[$0].first_line}${_$[$0].first_column}INSTDECVEC"`]];

    
break;
case 39:

        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}INSTDECVEC"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-8][1].length; i++){
            Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}INSTDECVEC" -> ${$$[$0-8][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}INSTDECVEC"[label = "["];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}INSTDECVEC"[label = "]"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}INSTDECVEC"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}INSTDECVEC"[label = "="];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}INSTDECVEC"[label = "{"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INSTDECVEC"[label = "VALORES"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INSTDECVEC" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}INSTDECVEC"[label = "}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INSTDECVEC"[label = ";"];\n`;
        this.$ = [[],[
            `"${_$[$0-8].first_line}${_$[$0-8].first_column}INSTDECVEC"`, `"${_$[$0-7].first_line}${_$[$0-7].first_column}INSTDECVEC"`,
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}INSTDECVEC"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}INSTDECVEC"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}INSTDECVEC"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}INSTDECVEC"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}INSTDECVEC"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}INSTDECVEC"`,
            `"${_$[$0].first_line}${_$[$0].first_column}INSTDECVEC"`]];
    
break;
case 40:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column+1}DECLARACION"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column+1}DECLARACION" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION"[label = "LISTA IDS"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DECLARACION"[label = "${$$[$0]}"];\n`;
        let ast31 = [`"${_$[$0-2].first_line}${_$[$0-2].first_column+1}DECLARACION"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION"`,
        `"${_$[$0].first_line}${_$[$0].first_column}DECLARACION"`]
        this.$ = [new Declaration.default($$[$0-1][0], $$[$0-2][0], null, Math.round(this._$.first_line), _$[$0-2].first_column),ast31];
    
break;
case 41:

        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column+1}DECLARACION"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
            Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column+1}DECLARACION" -> ${$$[$0-4][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECLARACION"[label = "LISTA IDS"];\n`;
        for(let i = 0; i < $$[$0-3][1].length; i++){
            Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECLARACION" -> ${$$[$0-3][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECLARACION"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DECLARACION"[label = "${$$[$0]}"];\n`;
        let ast32 = [`"${_$[$0-4].first_line}${_$[$0-4].first_column+1}DECLARACION"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECLARACION"`,
        `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECLARACION"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION"`,
        `"${_$[$0].first_line}${_$[$0].first_column}DECLARACION"`]
        this.$ = [new Declaration.default($$[$0-3][0], $$[$0-4][0], $$[$0-1][0], Math.round(this._$.first_line), _$[$0-4].first_column), ast32];
    
break;
case 42:

        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column+1}DECLARACION"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-5][1].length; i++){
            Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column+1}DECLARACION" -> ${$$[$0-5][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECLARACION"[label = "LISTA IDS"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
            Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECLARACION" -> ${$$[$0-4][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECLARACION"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECLARACION"[label = "CAST"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECLARACION" -> ${$$[$0-2][1][i]}`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DECLARACION"[label = "${$$[$0]}"];\n`;
        let ast33 = [`"${_$[$0-5].first_line}${_$[$0-5].first_column+1}DECLARACION"`, `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECLARACION"`,
        `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECLARACION"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECLARACION"`,
        `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECLARACION"`, `"${_$[$0].first_line}${_$[$0].first_column}DECLARACION"`]
        let cast2 = new CastExpression.default($$[$0-1][0], $$[$0-2][0], Math.round(this._$.first_line), _$[$0-5].first_column);
        this.$ = [new Declaration.default($$[$0-4][0], $$[$0-5][0], cast2, Math.round(this._$.first_line), _$[$0-5].first_column), ast33];
    
break;
case 43:

        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}DOUNTIL"[label = "${$$[$0-8]}"];\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}DOUNTIL"[label = "${$$[$0-7]}"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DOUNTIL"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-6].length; i++){
            try{
                Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DOUNTIL" -> ${$$[$0-6][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}DOUNTIL"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}DOUNTIL"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DOUNTIL"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DOUNTIL"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DOUNTIL" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DOUNTIL"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DOUNTIL"[label = "${$$[$0]}"];\n`;
        this.$ = [[], [
            `"${_$[$0-8].first_line}${_$[$0-8].first_column}DOUNTIL"`, `"${_$[$0-7].first_line}${_$[$0-7].first_column}DOUNTIL"`,
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}DOUNTIL"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}DOUNTIL"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}DOUNTIL"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}DOUNTIL"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}DOUNTIL"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}DOUNTIL"`,
            `"${_$[$0].first_line}${_$[$0].first_column}DOUNTIL"`
        ]];
    
break;
case 44:

        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}DOWHILE"[label = "${$$[$0-8]}"];\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}DOWHILE"[label = "${$$[$0-7]}"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DOWHILES"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-6].length; i++){
            try{
                Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DOWHILES" -> ${$$[$0-6][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}DOWHILE"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}DOWHILE"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DOWHILE"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DOWHILE"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DOWHILE" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DOWHILE"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DOWHILE"[label = "${$$[$0]}"];\n`;
        this.$ = [[], [
            `"${_$[$0-8].first_line}${_$[$0-8].first_column}DOWHILE"`, `"${_$[$0-7].first_line}${_$[$0-7].first_column}DOWHILE"`,
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}DOWHILES"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}DOWHILE"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}DOWHILE"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}DOWHILE"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}DOWHILE"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}DOWHILE"`,
            `"${_$[$0].first_line}${_$[$0].first_column}DOWHILE"`
        ]];
    
break;
case 45:

        Controller.ast += `"${_$[$0-9].first_line}${_$[$0-9].first_column}FOR"[label = "for"];\n`;
        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}FOR"[label = "("];\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}FOR"[label = "INICIO"];\n`;
        for(let i = 0; i < $$[$0-7][1].length; i++){
            Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}FOR" -> ${$$[$0-7][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}FOR"[label = "CONDICION"];\n`;
        for(let i = 0; i < $$[$0-6][1].length; i++){
            Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}FOR" -> ${$$[$0-6][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}FOR"[label = ";"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}FOR"[label = "INCREMENTO"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
            Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}FOR" -> ${$$[$0-4][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}FOR"[label = ")"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}FOR"[label = "{"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}FOR"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-1].length; i++){
            try{
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}FOR" -> ${$$[$0-1][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}FOR"[label = "}"];\n`;
        this.$ = [[], [
            `"${_$[$0-9].first_line}${_$[$0-9].first_column}FOR"`, `"${_$[$0-8].first_line}${_$[$0-8].first_column}FOR"`,
            `"${_$[$0-7].first_line}${_$[$0-7].first_column}FOR"`, `"${_$[$0-6].first_line}${_$[$0-6].first_column}FOR"`,
            `"${_$[$0-5].first_line}${_$[$0-5].first_column}FOR"`, `"${_$[$0-4].first_line}${_$[$0-4].first_column}FOR"`,
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}FOR"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}FOR"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}FOR"`, `"${_$[$0].first_line}${_$[$0].first_column}FOR"`
        ]]
    
break;
case 46:

        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}DECFUNC"[label = "${$$[$0-8]}"];\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECFUNC"[label = "${$$[$0-7]}"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECFUNC"[label = "PARAMETROS"];\n`;
        for(let i = 0; i < $$[$0-6][1].length; i++){
            Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECFUNC" -> ${$$[$0-6][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECFUNC"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECFUNC"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECFUNC"[label = "TIPO"];\n`;
        for(let i = 0; i < $$[$0-3][1].length; i++){
            Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECFUNC" -> ${$$[$0-3][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECFUNC"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECFUNC"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-1].length; i++){
            try{
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECFUNC" -> ${$$[$0-1][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DECFUNC"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-8].first_line}${_$[$0-8].first_column}DECFUNC"`, `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECFUNC"`,
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECFUNC"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECFUNC"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECFUNC"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECFUNC"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECFUNC"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECFUNC"`,
            `"${_$[$0].first_line}${_$[$0].first_column}DECFUNC"`
        ]]
    
break;
case 47:

        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECFUNC"[label = "${$$[$0-7]}"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECFUNC"[label = "${$$[$0-6]}"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECFUNC"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECFUNC"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECFUNC"[label = "TIPO"];\n`;
        for(let i = 0; i < $$[$0-3][1].length; i++){
            Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECFUNC" -> ${$$[$0-3][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECFUNC"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECFUNC"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-1].length; i++){
            try{
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECFUNC" -> ${$$[$0-1][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DECFUNC"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-7].first_line}${_$[$0-7].first_column}DECFUNC"`, `"${_$[$0-6].first_line}${_$[$0-6].first_column}DECFUNC"`,
            `"${_$[$0-5].first_line}${_$[$0-5].first_column}DECFUNC"`, `"${_$[$0-4].first_line}${_$[$0-4].first_column}DECFUNC"`,
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}DECFUNC"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECFUNC"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECFUNC"`, `"${_$[$0].first_line}${_$[$0].first_column}DECFUNC"`
        ]]
    
break;
case 48:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}LLAMADA"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}LLAMADA"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}LLAMADA"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}LLAMADA"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}LLAMADA"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}LLAMADA"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}LLAMADA"`, `"${_$[$0].first_line}${_$[$0].first_column}LLAMADA"`
        ]];
    
break;
case 49:

        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}LLAMADA"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}LLAMADA"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}LLAMADA"[label = "VALORES"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}LLAMADA" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}LLAMADA"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}LLAMADA"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}LLAMADA"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}LLAMADA"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}LLAMADA"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}LLAMADA"`,
            `"${_$[$0].first_line}${_$[$0].first_column}LLAMADA"`
        ]];
    
break;
case 50:

        Controller.ast += `"${_$[$0-8].first_line}${_$[$0-8].first_column}IF"[label = "${$$[$0-8]}"];\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}IF"[label = "${$$[$0-7]}"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}IF"[label = "EXPRESION"];\n`;
        for(let i = 0;  i < $$[$0-6][1].length; i++){
            Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}IF" -> ${$$[$0-6][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}IF"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}IF"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}IF"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-3].length; i++){
            try{
                Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}IF" -> ${$$[$0-3][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}IF"[label = "${$$[$0-2]}"];\n`;
        let auxif = [];
        if($$[$0-1] != null){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}IF"[label = "ELIFS"];\n`;
            for(let i = 0; i < $$[$0-1][1].length; i++){
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}IF" -> ${$$[$0-1][1][i]};\n`;
            }
            auxif.push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}IF"`);
        }
        if($$[$0] != null){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}IF"[label = "ELSE"];\n`;
            for(let i = 0; i < $$[$0][1].length; i++){
                Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}IF" -> ${$$[$0][1][i]};\n`;
            }
            auxif.push(`"${_$[$0].first_line}${_$[$0].first_column}IF"`);
        }
        let auxif2 = [
            `"${_$[$0-8].first_line}${_$[$0-8].first_column}IF"`, `"${_$[$0-7].first_line}${_$[$0-7].first_column}IF"`,
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}IF"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}IF"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}IF"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}IF"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}IF"`
        ]
        auxif2 = auxif2.concat(auxif);
        this.$ = [[], auxif2];
    
break;
case 51:

        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}PRINT"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}PRINT"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}PRINT"[label = "EXPRESION"];\n`;
        for(let i = 0;  i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}PRINT" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}PRINT"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PRINT"[label = "${$$[$0]}"];\n`;
        let ast2 = [`"${_$[$0-4].first_line}${_$[$0-4].first_column}PRINT"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}PRINT"`,
        `"${_$[$0-2].first_line}${_$[$0-2].first_column}PRINT"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}PRINT"`,
        `"${_$[$0].first_line}${_$[$0].first_column}PRINT"`]
        this.$ = [new Print.default($$[$0-2][0],Math.round(this._$.first_line), _$[$0-4].first_column),ast2];
    
break;
case 52:

        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}PRINTLN"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}PRINTLN"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}PRINTLN"[label = "EXPRESION"];\n`;
        for(let i = 0;  i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}PRINTLN" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}PRINTLN"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PRINTLN"[label = "${$$[$0]}"];\n`;
        let ast1 = [`"${_$[$0-4].first_line}${_$[$0-4].first_column}PRINTLN"`,`"${_$[$0-3].first_line}${_$[$0-3].first_column}PRINTLN"`,
        `"${_$[$0-2].first_line}${_$[$0-2].first_column}PRINTLN"`,`"${_$[$0-1].first_line}${_$[$0-1].first_column}PRINTLN"`,
        `"${_$[$0].first_line}${_$[$0].first_column}PRINTLN"`]
        this.$ = [new PrintLn.default($$[$0-2][0], Math.round(this._$.first_line), _$[$0-4].first_column), ast1];
    
break;
case 53:

        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}SWITCH"[label = "${$$[$0-7]}"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}SWITCH"[label = "${$$[$0-6]}"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}SWITCH"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-5][1].length; i++){
            Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}SWITCH" -> ${$$[$0-5][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}SWITCH"[label = "${$$[$0-4]}"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}SWITCH"[label = "${$$[$0-3]}"];\n`;
        let auxswitch = [];
        if($$[$0-2] != null){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}SWITCHA"[label = "LISTA CASES"];\n`;
            auxswitch.push(`"${_$[$0-2].first_line}${_$[$0-2].first_column}SWITCHA"`);
            for(let i = 0; i < $$[$0-2][1].length; i++){
                Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}SWITCHA" -> ${$$[$0-2][1][i]};\n`;
            }
        }
        if($$[$0-1] != null){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}SWITCH"[label = "INST DEFAULT"];\n`;
            auxswitch.push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}SWITCH"`);
            for(let i = 0; i < $$[$0-1][1].length; i++){
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}SWITCH" -> ${$$[$0-1][1][i]};\n`;
            }
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}SWITCH"[label = "${$$[$0]}"];\n`;
        let rts = [
            `"${_$[$0-7].first_line}${_$[$0-7].first_column}SWITCH"`, `"${_$[$0-6].first_line}${_$[$0-6].first_column}SWITCH"`,
            `"${_$[$0-5].first_line}${_$[$0-5].first_column}SWITCH"`, `"${_$[$0-4].first_line}${_$[$0-4].first_column}SWITCH"`,
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}SWITCH"`];
        rts = rts.concat(auxswitch)
        rts = rts.concat([
            `"${_$[$0].first_line}${_$[$0].first_column}SWITCH"`
        ]);
        this.$ = [[], rts];
    
break;
case 54:

        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}WHILE"[label = "${$$[$0-6]}"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}WHILE"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}WHILE"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
                Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}WHILE" -> ${$$[$0-4][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}WHILE"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}WHILE"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}WHILE"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-1].length; i++){
            try{
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}WHILE" -> ${$$[$0-1][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}WHILE"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-6].first_line}${_$[$0-6].first_column}WHILE"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}WHILE"`,
            `"${_$[$0-4].first_line}${_$[$0-4].first_column}WHILE"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}WHILE"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}WHILE"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}WHILE"`,
            `"${_$[$0].first_line}${_$[$0].first_column}WHILE"`
        ]]
    
break;
case 55:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Arithmetic.default($$[$0-2][0], 1, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 56:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Arithmetic.default($$[$0-2][0], 2, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 57:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Arithmetic.default($$[$0-2][0], 3, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 58:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Arithmetic.default($$[$0-2][0], 4, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 59:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Arithmetic.default($$[$0-2][0], 5, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 60:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Arithmetic.default($$[$0-2][0], 6, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 61:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Relational.default($$[$0-2][0], 1, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 62:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Relational.default($$[$0-2][0], 2, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 63:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Relational.default($$[$0-2][0], 3, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 64:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Relational.default($$[$0-2][0], 4, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 65:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Relational.default($$[$0-2][0], 5, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 66:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Relational.default($$[$0-2][0], 6, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 67:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Logical.default($$[$0-2][0], 1, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 68:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`);
        this.$ = [new Logical.default($$[$0-2][0], 2, $$[$0][0], Math.round(this._$.first_line), _$[$0-2].first_column),$$[$0-2][1].concat($$[$0][1])];
    
break;
case 69:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "!"];\n`;
        let arex3 = [`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`];
        arex3 = arex3.concat($$[$0][1]);
        let b = new Native.default(Type.DataType.BOOLEAN, true, Math.round(this._$.first_line), _$[$0-1].first_column);
        this.$ = [new Logical.default($$[$0][0], 3, b, Math.round(this._$.first_line), _$[$0-1].first_column), arex3];
    
break;
case 70:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "-"];\n`;
        let arex2 = [`"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`];
        arex2 = arex2.concat($$[$0][1]);
        let a = new Native.default(Type.DataType.ENTERO, Number(0), Math.round(this._$.first_line), _$[$0-1].first_column);
        this.$ = [new Arithmetic.default($$[$0][0], 7, a, Math.round(this._$.first_line), _$[$0-1].first_column), arex2];
    
break;
case 71:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"[label = "("];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = ")"];\n`;
        let arex1 = [`"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"`];
        arex1 = arex1.concat($$[$0-1][1]);
        arex1.push(`"${_$[$0].first_line}${_$[$0].first_column}Expression"`);
        this.$ = [$$[$0-1][0],arex1];
    
break;
case 72:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [new Native.default(Type.DataType.ENTERO, Number($$[$0]), Math.round(this._$.first_line), _$[$0].first_column),
        [`"${_$[$0].first_line}${_$[$0].first_column}Expression"`]];
    
break;
case 73:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [new Native.default(Type.DataType.DECIMAL, parseFloat($$[$0]), Math.round(this._$.first_line), _$[$0].first_column),
        [`"${_$[$0].first_line}${_$[$0].first_column}Expression"`]];
    
break;
case 74:

        $$[$0] = $$[$0].replace("\\n","\n");
        $$[$0] = $$[$0].replace("\\\\","\\");
        $$[$0] = $$[$0].replace("\\\"","\"");
        $$[$0] = $$[$0].replace("\\t","\t");
        $$[$0] = $$[$0].replace("\\'","'");
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [new Native.default(Type.DataType.CADENA, $$[$0], Math.round(this._$.first_line), _$[$0].first_column),
        [`"${_$[$0].first_line}${_$[$0].first_column}Expression"`]];
    
break;
case 75:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [new Native.default(Type.DataType.CARACTER, $$[$0], Math.round(this._$.first_line), _$[$0].first_column),
        [`"${_$[$0].first_line}${_$[$0].first_column}Expression"`]];
    
break;
case 76:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [new Native.default(Type.DataType.BOOLEAN, $$[$0], Math.round(this._$.first_line), _$[$0].first_column),
        [`"${_$[$0].first_line}${_$[$0].first_column}Expression"`]];
    
break;
case 77:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [new Native.default(Type.DataType.ID, $$[$0], Math.round(this._$.first_line), _$[$0].first_column), 
        [`"${_$[$0].first_line}${_$[$0].first_column}Expression"`]];
    
break;
case 78:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}Expression"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionA"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionA" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [[], 
        [`"${_$[$0-3].first_line}${_$[$0-3].first_column}Expression"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"`,
        `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionA"`, `"${_$[$0].first_line}${_$[$0].first_column}Expression"`]];
    
break;
case 79:

        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}Expression"[label = "${$$[$0-6]}"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}Expression"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}ExpressionA"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
            Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}ExpressionA" -> ${$$[$0-4][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}Expression"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionB"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionB" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [[], 
        [`"${_$[$0-6].first_line}${_$[$0-6].first_column}Expression"`, `"${_$[$0-5].first_line}${_$[$0-5].first_column}Expression"`,
        `"${_$[$0-4].first_line}${_$[$0-4].first_column}ExpressionA"`, `"${_$[$0-3].first_line}${_$[$0-3].first_column}Expression"`,
        `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionB"`,
        `"${_$[$0].first_line}${_$[$0].first_column}Expression"`]];
    
break;
case 80:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expression"`,
            `"${_$[$0].first_line}${_$[$0].first_column}Expression"`
        ]]
    
break;
case 81:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}Expression"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expressions"[label = "VALORES"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expressions" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}Expression"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}Expressions"`, `"${_$[$0].first_line}${_$[$0].first_column}Expression"`
        ]]
    
break;
case 82: case 83: case 84: case 85: case 86: case 87: case 88:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}Expression"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionL"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionL" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}Expression"[label = "${$$[$0-3]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}Expression"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}Expression"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}ExpressionL"`, `"${_$[$0].first_line}${_$[$0].first_column}Expression"`
        ]]
    
break;
case 89: case 97:

        this.$ = $$[$0];
    
break;
case 90:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}TIPOFUN"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[`"${_$[$0].first_line}${_$[$0].first_column}TIPOFUN"`]]
    
break;
case 91:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"[label = "${$$[$0]}"];\n`; 
        this.$ = [Type.DataType.ENTERO,[`"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"`]]; 
    
break;
case 92:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"[label = "${$$[$0]}"];\n`; 
        this.$ = [Type.DataType.DECIMAL,[`"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"`]];
    
break;
case 93:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"[label = "${$$[$0]}"];\n`; 
        this.$ = [Type.DataType.CADENA,[`"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"`]]; 
    
break;
case 94:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"[label = "${$$[$0]}"];\n`; 
        this.$ = [Type.DataType.CARACTER,[`"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"`]]; 
    
break;
case 95:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"[label = "${$$[$0]}"];\n`; 
        this.$ = [Type.DataType.BOOLEAN,[`"${_$[$0].first_line}${_$[$0].first_column}TIPO_DATO"`]]; 
    
break;
case 96:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}IDS"[label = "${$$[$0-1]}"];\n`;
        $$[$0-2][1].push(`"${_$[$0-1].first_line}${_$[$0-1].first_column}IDS"`);
        $$[$0-2][1] = $$[$0-2][1].concat($$[$0][1]);
        this.$ = $$[$0-2]
    
break;
case 98:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}IDS"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[`"${_$[$0].first_line}${_$[$0].first_column}IDS"`]];
    
break;
case 99:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}IDS"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}IDS"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}IDS"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}IDS" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}IDS"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[`"${_$[$0-3].first_line}${_$[$0-3].first_column}IDS"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}IDS"`,
        `"${_$[$0-1].first_line}${_$[$0-1].first_column}IDS"`,`"${_$[$0].first_line}${_$[$0].first_column}IDS"`]];
    
break;
case 100:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}CASTEO"[label = "("];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}CASTEO"[label = "TIPO DATO"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0].first_column}CASTEO"[label = ")"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}CASTEO" -> ${$$[$0-1][1][i]};\n`;
        } 
        this.$ = [$$[$0-1][0], [`"${_$[$0-2].first_line}${_$[$0-2].first_column}CASTEO"`,`"${_$[$0-1].first_line}${_$[$0-1].first_column}CASTEO"`,`"${_$[$0].first_line}${_$[$0].first_column}CASTEO"`]];
    
break;
case 101:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}VALORES_MATRIX"[label = ","];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}VALORES_MATRIX"[label = "{"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}VALORES_MATRIX"[label = "VALORES"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}VALORES_MATRIX" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}VALORES_MATRIX"[label = "}"];\n`;
        this.$ = [[],
            $$[$0-4][1].concat(
                [`"${_$[$0-3].first_line}${_$[$0-3].first_column}VALORES_MATRIX"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}VALORES_MATRIX"`,
                 `"${_$[$0-1].first_line}${_$[$0-1].first_column}VALORES_MATRIX"`, `"${_$[$0].first_line}${_$[$0].first_column}VALORES_MATRIX"`
                ])];
    
break;
case 102:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}VALORES_MATRIX"[label = "{"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}VALORES_MATRIX"[label = "VALORES"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}VALORES_MATRIX" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}VALORES_MATRIX"[label = "}"];\n`;
        this.$ = [[],
            [
                `"${_$[$0-2].first_line}${_$[$0-2].first_column}VALORES_MATRIX"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}VALORES_MATRIX"`,
                `"${_$[$0].first_line}${_$[$0].first_column}VALORES_MATRIX"`
            ]
        ];
    
break;
case 103:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}VALORES"[label = ","];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}VALORES"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}VALORES" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [[],$$[$0-2][1].concat([`"${_$[$0-1].first_line}${_$[$0-1].first_column}VALORES"`, `"${_$[$0].first_line}${_$[$0].first_column}VALORES"`])];
    
break;
case 104:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}VALORES"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}VALORES" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [[],[`"${_$[$0].first_line}${_$[$0].first_column}VALORES"`]];
    
break;
case 105:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}PARAMETROS"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}PARAMETROS"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}PARAMETROS" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PARAMETROS"[label = "${$$[$0]}"];\n`;
        this.$ = [[], $$[$0-3][1].concat([
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}PARAMETROS"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}PARAMETROS"`,
            `"${_$[$0].first_line}${_$[$0].first_column}PARAMETROS"`
        ])]
    
break;
case 106:

        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}PARAMETROS"[label = "TIPO DATO"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}PARAMETROS" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PARAMETROS"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}PARAMETROS"`, `"${_$[$0].first_line}${_$[$0].first_column}PARAMETROS"`
        ]]
    
break;
case 107:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}LISTAELIF"[label = "LISTA ELIFS"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}LISTAELIF" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [[],[`"${_$[$0].first_line}${_$[$0].first_column}LISTAELIF"`]];
    
break;
case 108: case 112: case 117:
 this.$ = null; 
break;
case 109:

        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF"[label = "ELIF"];\n`;
        
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}ELIF"[label = "${$$[$0-6]}"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}ELIF"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}ELIF"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
            Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}ELIF" -> ${$$[$0-4][1][i]}`
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}ELIF"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}ELIF"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ELIF"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-1].length; i++){
            try{
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ELIF" -> ${$$[$0-1][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}ELIF"[label = "${$$[$0]}"];\n`;

        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF" -> "${_$[$0-6].first_line}${_$[$0-6].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF" -> "${_$[$0-5].first_line}${_$[$0-5].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF" -> "${_$[$0-4].first_line}${_$[$0-4].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF" -> "${_$[$0-3].first_line}${_$[$0-3].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF" -> "${_$[$0-2].first_line}${_$[$0-2].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF" -> "${_$[$0-1].first_line}${_$[$0-1].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF" -> "${_$[$0].first_line}${_$[$0].first_column}ELIF";\n`;

        this.$ = [[], $$[$0-7][1].concat([`"${_$[$0-7].first_line}${_$[$0-7].first_column}PPELIF"`])];
    
break;
case 110:

        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF"[label = "ELIF"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}ELIF"[label = "${$$[$0-6]}"];\n`;
        Controller.ast += `"${_$[$0-5].first_line}${_$[$0-5].first_column}ELIF"[label = "${$$[$0-5]}"];\n`;
        Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}ELIF"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-4][1].length; i++){
            Controller.ast += `"${_$[$0-4].first_line}${_$[$0-4].first_column}ELIF" -> ${$$[$0-4][1][i]}`
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}ELIF"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}ELIF"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ELIF"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-1].length; i++){
            try{
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ELIF" -> ${$$[$0-1][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}ELIF"[label = "${$$[$0]}"];\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF" -> "${_$[$0-6].first_line}${_$[$0-6].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF" -> "${_$[$0-5].first_line}${_$[$0-5].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF" -> "${_$[$0-4].first_line}${_$[$0-4].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF" -> "${_$[$0-3].first_line}${_$[$0-3].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF" -> "${_$[$0-2].first_line}${_$[$0-2].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF" -> "${_$[$0-1].first_line}${_$[$0-1].first_column}ELIF";\n`;
        Controller.ast += `"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF" -> "${_$[$0].first_line}${_$[$0].first_column}ELIF";\n`;
        this.$ = [[], [`"${_$[$0-6].first_line}${_$[$0-6].first_column}PELIF"`]];
    
break;
case 111:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}ELSE"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}ELSE"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ELSE"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0-1].length; i++){
            try{
                Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ELSE" -> ${$$[$0-1][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}ELSE"[label = "${$$[$0]}"];\n`;
        this.$ = [[], [
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}ELSE"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}ELSE"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}ELSE"`, `"${_$[$0].first_line}${_$[$0].first_column}ELSE"`
        ]];
    
break;
case 113:

        if($$[$0-1] != null){
            this.$ = [[], $$[$0-1][1].concat($$[$0][1])]
        }else{
            this.$ = $$[$0];
        }
    
break;
case 114:
 this.$ =  null; 
break;
case 115:

        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}EELCASE"[label = "CASE ELEMENT"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}ELCASE"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}ELCASE"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}ELCASE" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}ELCASE"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}ELCASE"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0].length; i++){
            try{
                Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}ELCASE" -> ${$$[$0][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}EELCASE" -> "${_$[$0-3].first_line}${_$[$0-3].first_column}ELCASE";\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}EELCASE" -> "${_$[$0-2].first_line}${_$[$0-2].first_column}ELCASE";\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}EELCASE" -> "${_$[$0-1].first_line}${_$[$0-1].first_column}ELCASE";\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}EELCASE" -> "${_$[$0].first_line}${_$[$0].first_column}ELCASE";\n`;
        this.$ = [[],[`"${_$[$0-3].first_line}${_$[$0-3].first_column}EELCASE"`]]
    
break;
case 116:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DEFAULT"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DEFAULT"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DEFAULT"[label = "INSTRUCCIONES"];\n`;
        for(let i = 0; i < $$[$0].length; i++){
            try{
                Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DEFAULT" -> ${$$[$0][i][1][0]};\n`;
            }catch(err){
                console.log(err);
            }
        }
        this.$ = [[], [
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}DEFAULT"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}DEFAULT"`,
            `"${_$[$0].first_line}${_$[$0].first_column}DEFAULT"`
        ]];
    
break;
case 118:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INICIO"[label = "DECLARACION FOR"];\n`;
        for(let  i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INICIO" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [[],[`"${_$[$0].first_line}${_$[$0].first_column}INICIO"`]];
    
break;
case 119:

        Controller.ast += `"${_$[$0-3].first_line+1}${_$[$0-3].first_column+1}INICIOAs"[label = "ASIGNACION FOR"];\n`;
        Controller.ast += `"${_$[$0-3].first_line}${_$[$0-3].first_column}INICIO"[label = "${$$[$0-3]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INICIO"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}INICIO"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-1][1].length; i++){
            Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}INICIO" -> ${$$[$0-1][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INICIO"[label = "${$$[$0]}"];\n`;
        let afx = [
            `"${_$[$0-3].first_line}${_$[$0-3].first_column}INICIO"`, `"${_$[$0-2].first_line}${_$[$0-2].first_column}INICIO"`,
            `"${_$[$0-1].first_line}${_$[$0-1].first_column}INICIO"`, `"${_$[$0].first_line}${_$[$0].first_column}INICIO"`
        ]
        for(let i = 0; i < afx.length; i++){
            Controller.ast += `"${_$[$0-3].first_line+1}${_$[$0-3].first_column+1}INICIOAs" -> ${afx[i]};\n`;
        }
        this.$ = [[],[`"${_$[$0-3].first_line+1}${_$[$0-3].first_column+1}INICIOAs"`]];
    
break;
case 120:

        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PASO"[label = "INCREMENTO"];\n`; 
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PASO" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [[],[`"${_$[$0].first_line}${_$[$0].first_column}PASO"`]]; 
    
break;
case 121:
 
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PASO"[label = "DECREMENTO"];\n`; 
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}PASO" -> ${$$[$0][1][i]};\n`;
        }
        this.$ = [[],[`"${_$[$0].first_line}${_$[$0].first_column}PASO"`]]; 
    
break;
case 122:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INASS"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INAS"[label = "${$$[$0-2]}"];\n`;
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}INAS"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INAS"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0][1].length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INAS" -> ${$$[$0][1][i]};\n`;
        }
        let auidg = [
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}INAS"`, `"${_$[$0-1].first_line}${_$[$0-1].first_column}INAS"`,
            `"${_$[$0-2].first_line}${_$[$0-2].first_column}INAS"`
        ]
        for(let i = 0; i < auidg.length; i++){
            Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INASS" -> ${auidg[i]};\n`;
        }
        this.$ = [[],[`"${_$[$0].first_line}${_$[$0].first_column}INASS"`]]; 
    
break;
case 123:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INCREMENTO"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}INCREMENTO" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}INCREMENTO"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}INCREMENTO"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[`"${_$[$0-2].first_line}${_$[$0-2].first_column}INCREMENTO"`,`"${_$[$0-1].first_line}${_$[$0-1].first_column}INCREMENTO"`,
        `"${_$[$0].first_line}${_$[$0].first_column}INCREMENTO"`]]
    
break;
case 124:

        Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECREMENTO"[label = "EXPRESION"];\n`;
        for(let i = 0; i < $$[$0-2][1].length; i++){
            Controller.ast += `"${_$[$0-2].first_line}${_$[$0-2].first_column}DECREMENTO" -> ${$$[$0-2][1][i]};\n`;
        }
        Controller.ast += `"${_$[$0-1].first_line}${_$[$0-1].first_column}DECREMENTO"[label = "${$$[$0-1]}"];\n`;
        Controller.ast += `"${_$[$0].first_line}${_$[$0].first_column}DECREMENTO"[label = "${$$[$0]}"];\n`;
        this.$ = [[],[`"${_$[$0-2].first_line}${_$[$0-2].first_column}DECREMENTO"`,`"${_$[$0-1].first_line}${_$[$0-1].first_column}DECREMENTO"`,
        `"${_$[$0].first_line}${_$[$0].first_column}DECREMENTO"`]]
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{1:[3]},{2:$V0,5:[1,46],6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,26],{28:[1,48]}),{38:[1,49],101:$Vk},{28:[1,51]},{28:[1,52]},{28:[1,54],29:$Vl,32:$Vm,39:53,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o([38,101],$VB,{30:[1,71],32:[1,72],45:$VC}),{26:74,29:[1,75]},{29:$VD,37:76,45:[1,77],102:40},{48:[1,79]},{32:[1,80]},{32:[1,81]},{32:[1,82]},{32:[1,83]},{32:[1,84]},{32:[1,85]},o($VE,[2,97]),o($VF,[2,91]),o($VF,[2,92]),o($VF,[2,93]),o($VF,[2,94]),o($VF,[2,95]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,25]),{29:$Vl,32:$VG,39:86,40:87,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$VD,102:89},o($Vj,[2,32]),o($Vj,[2,33]),{28:[1,90],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vj,[2,35]),{29:$Vl,32:$Vm,39:105,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:106,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:107,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($VV,[2,72]),o($VV,[2,73]),o($VV,[2,74]),o($VV,[2,75]),o($VV,[2,76]),o($VV,$VW,{32:$VX,45:$VY}),{32:[1,110]},{32:[1,111]},{32:[1,112]},{32:[1,113]},{32:[1,114]},{32:[1,115]},{32:[1,116]},{31:[1,117],35:[1,118]},{29:$Vl,32:$Vm,33:121,34:[1,120],39:123,44:122,57:119,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi},{29:$Vl,32:$Vm,39:124,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($Vj,[2,29]),{32:[1,125]},{28:[1,126],38:[1,127],101:$Vk},{46:[1,128]},o($VE,$VB,{45:$VC}),{2:$V0,4:129,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{14:131,29:[1,132],44:133,55:130,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi},{29:$Vl,32:$Vm,39:134,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:135,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:136,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:137,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:138,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{28:[1,139],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:$Vl,32:$Vm,39:140,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:107,44:141,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi},o($VE,[2,96]),o($Vj,[2,34]),{29:$Vl,32:$Vm,39:142,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:143,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:144,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:145,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:146,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:147,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:148,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:149,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:150,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:151,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:152,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:153,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:154,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:155,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($VV,[2,69]),o($VZ,[2,70],{70:$VJ,71:$VK,72:$VL,73:$VM}),{34:[1,156],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:$Vl,32:$Vm,39:157,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,33:159,34:[1,158],39:123,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:160,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:161,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:162,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:163,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:164,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:165,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:166,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{32:[1,167]},{32:[1,168]},{34:[1,169],101:[1,170]},{28:$V_,58:[1,171]},{34:[1,173],101:$V$},{29:[1,175]},o($V01,[2,104],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU}),{46:[1,176],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:$Vl,32:$Vm,33:121,34:[1,177],39:123,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($V11,[2,40]),{29:$Vl,32:$VG,39:178,40:179,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:[1,181],45:[1,180]},{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,182],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{29:$Vl,32:$Vm,39:183,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($V21,[2,118]),{38:[1,184]},{29:$VD,37:76,102:40},{34:[1,185],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,186],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,187],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,188],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,189],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vj,[2,30]),{28:[1,190],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,191]},o($VZ,[2,55],{70:$VJ,71:$VK,72:$VL,73:$VM}),o($VZ,[2,56],{70:$VJ,71:$VK,72:$VL,73:$VM}),o($V31,[2,57],{72:$VL}),o($V31,[2,58],{72:$VL}),o($VV,[2,59]),o([28,34,46,50,58,68,69,73,74,75,76,77,78,79,80,81,101],[2,60],{70:$VJ,71:$VK,72:$VL}),o($V41,[2,61],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM}),o($V41,[2,62],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM}),o($V41,[2,63],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM}),o($V41,[2,64],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM}),o($V51,[2,65],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ}),o($V51,[2,66],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ}),o([28,34,46,50,58,80,101],[2,67],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,81:$VU}),o($V51,[2,68],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS}),o($VV,[2,71]),{46:[1,192],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($VV,[2,80]),{34:[1,193],101:$V$},{34:[1,194],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,195],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,196],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,197],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,198],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,199],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,200],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:$Vl,32:$Vm,33:201,39:123,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{34:[1,202]},{58:[1,203]},{44:204,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi},{44:206,59:205,95:$V61,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi},o($Vj,[2,48]),{28:[1,208]},{29:$Vl,32:$Vm,39:209,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($V71,[2,106]),o($VE,[2,99]),{28:$V_},{28:[1,210],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:$Vl,32:$Vm,39:211,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{46:[1,212]},{38:[1,213]},{52:[1,214],53:[1,215]},{28:[1,216],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:$Vl,32:$Vm,39:217,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{48:[1,218]},{28:[1,219]},{28:[1,220]},{48:[1,221]},{48:[1,222]},o($Vj,[2,31]),o($V21,[2,100]),o($VV,[2,78],{45:[1,223]}),o($VV,[2,81]),o($VV,[2,82]),o($VV,[2,83]),o($VV,[2,84]),o($VV,[2,85]),o($VV,[2,86]),o($VV,[2,87]),o($VV,[2,88]),{34:[1,224],101:$V$},{28:[1,225]},{44:206,59:226,95:$V61,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi},{29:[1,227]},{48:[1,228]},{48:[2,89]},{48:[2,90]},o($Vj,[2,49]),o($V01,[2,103],{68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU}),o($V11,[2,41]),{28:[1,229],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{29:[1,230]},{47:[1,231],48:[1,232]},{32:[1,233]},{32:[1,234]},{29:[1,238],32:$Vm,39:239,56:235,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,109:236,110:237},{28:[1,240],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{2:$V0,4:241,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},o($Vj,[2,51]),o($Vj,[2,52]),o($V81,[2,114],{66:242}),{2:$V0,4:243,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{29:$Vl,32:$Vm,39:244,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{28:[1,245]},o($Vj,[2,28]),{48:[1,246]},o($V71,[2,105]),{2:$V0,4:247,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},o($V11,[2,42]),{38:[1,248]},{44:249,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi},{29:$Vl,32:$Vm,33:250,39:123,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:251,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:252,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{34:[1,253]},{34:[2,120]},{34:[2,121]},o([68,69,70,71,72,73,74,75,76,77,78,79,80,81],$VW,{32:$VX,38:[1,254],45:$VY}),{68:[1,255],69:[1,256],70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($V21,[2,119]),{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,257],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{50:[2,117],67:258,106:259,107:[1,261],108:[1,260]},{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,262],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{46:[1,263],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vj,[2,27]),{2:$V0,4:264,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,265],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{47:[1,266],48:[1,267]},{45:[1,268]},{50:[1,269],101:$V$},{34:[1,270],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[1,271],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{48:[1,272]},{29:$Vl,32:$Vm,39:273,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:142,68:[1,274],69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{29:$Vl,32:$Vm,39:143,69:[1,275],82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($V91,[2,108],{61:276,103:277,104:[1,278]}),{50:[1,279]},o($V81,[2,113]),{58:[1,280]},{29:$Vl,32:$Vm,39:281,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($Vj,[2,54]),o($VV,[2,79]),{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,282],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},o($Vj,[2,47]),{44:283,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi},{48:[1,285],49:284},{29:$Vl,32:$Vm,39:286,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{28:[1,287]},{28:[1,288]},{28:[1,289]},{2:$V0,4:290,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{34:[2,122],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{34:[2,123]},{29:$Vl,32:$Vm,34:[2,124],39:106,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($Vj,[2,112],{62:291,105:[1,292]}),o($V91,[2,107],{104:[1,293]}),{32:[1,294]},o($Vj,[2,53]),{2:$V0,4:295,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{58:[1,296],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vj,[2,46]),{45:[1,297]},{50:[1,298],101:[1,299]},{29:$Vl,32:$Vm,33:300,39:123,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{46:[1,301],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vj,[2,39]),o($Vj,[2,43]),o($Vj,[2,44]),{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,302],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},o($Vj,[2,50]),{48:[1,303]},{32:[1,304]},{29:$Vl,32:$Vm,39:305,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[2,116],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{2:$V0,4:306,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{29:$Vl,32:$Vm,39:307,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{28:[1,308]},{48:[1,309]},{50:[1,310],101:$V$},{28:[1,311]},o($Vj,[2,45]),{2:$V0,4:312,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{29:$Vl,32:$Vm,39:313,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},{34:[1,314],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($V81,[2,115],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,37:26,44:32,102:40,6:47,2:$V0,27:$V1,29:$V2,36:$V3,41:$V4,42:$V5,43:$V6,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi}),{46:[1,315],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},o($Vj,[2,37]),{29:$Vl,32:$Vm,33:316,39:123,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($Va1,[2,102]),o($Vj,[2,38]),{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,317],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{34:[1,318],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{48:[1,319]},{45:[1,320]},{50:[1,321],101:$V$},o($Vj,[2,111]),{48:[1,322]},{2:$V0,4:323,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{29:$Vl,32:$Vm,39:324,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA},o($Va1,[2,101]),{2:$V0,4:325,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,326],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},{46:[1,327],68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,80:$VT,81:$VU},{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:$V1,29:$V2,36:$V3,37:26,41:$V4,42:$V5,43:$V6,44:32,50:[1,328],51:$V7,53:$V8,54:$V9,60:$Va,63:$Vb,64:$Vc,65:$Vd,96:$Ve,97:$Vf,98:$Vg,99:$Vh,100:$Vi,102:40},o($Vb1,[2,110]),{28:[1,329]},o($Vb1,[2,109]),o($Vj,[2,36])],
defaultActions: {46:[2,1],206:[2,89],207:[2,90],236:[2,120],237:[2,121],274:[2,123]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //CODIGO JS
    const LexError = require("./errors/LexError");
    const SintaxError = require("./errors/SintaxError");
    const Native = require("./expressions/Native");
    const Arithmetic = require("./expressions/Arithmetic");
    const Relational = require("./expressions/Relational");
    const Logical = require("./expressions/Logical");
    const CastExpression = require("./expressions/CastExpression");
    const Type = require("./symbol/Type");
    const Controller = require("../controller/parser/Parser");
    const Print = require("./instructions/Print");
    const PrintLn = require("./instructions/PrintLn");
    const Declaration = require("./instructions/Declaration");
    const Assignment = require("./instructions/Assignment");
    var height = 0;
    let contCast, contPrint, contPrintln, contExpresion,contDecl,contAssign = 0;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log(`CL >>> ${yy_.yytext}`);
break;
case 1:console.log(`CB >>> ${yy_.yytext}`);
break;
case 2:return 100;
break;
case 3:return 41;
break;
case 4:return 107;
break;
case 5:return 99;
break;
case 6:return 42;
break;
case 7:return 'RDEF';
break;
case 8:return 108;
break;
case 9:return 51;
break;
case 10:return 97;
break;
case 11:return 104;
break;
case 12:return 105;
break;
case 13:return 54;
break;
case 14:return 60;
break;
case 15:return 96;
break;
case 16:return 91;
break;
case 17:return 47;
break;
case 18:return 35;
break;
case 19:return 63;
break;
case 20:return 64;
break;
case 21:return 31;
break;
case 22:return 43;
break;
case 23:return 90;
break;
case 24:return 36;
break;
case 25:return 98;
break;
case 26:return 65;
break;
case 27:return 94;
break;
case 28:return 88;
break;
case 29:return 93;
break;
case 30:return 89;
break;
case 31:return 87
break;
case 32:return 92;
break;
case 33:return 52;
break;
case 34:return 95;
break;
case 35:return 53;
break;
case 36:return 28;
break;
case 37:return 101;
break;
case 38:return 30;
break;
case 39:return 32;
break;
case 40:return 34;
break;
case 41:return 45;
break;
case 42:return 46;
break;
case 43:return 48;
break;
case 44:return 50;
break;
case 45:return 68;
break;
case 46:return 69;
break;
case 47:return 70;
break;
case 48:return 71;
break;
case 49:return 72;
break;
case 50:return 73;
break;
case 51:return 74;
break;
case 52:return 76;
break;
case 53:return 75;
break;
case 54:return 77;
break;
case 55:return 78;
break;
case 56:return 79;
break;
case 57:return 38;
break;
case 58:return 80;
break;
case 59:return 81;
break;
case 60:return 82;
break;
case 61:return 'INTERROGACION';
break;
case 62:return 58;
break;
case 63:
break;
case 64:return 84;
break;
case 65:return 83;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 85; 
break;
case 67: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 86;   
break;
case 68:return 29;
break;
case 69:return 5;
break;
case 70:console.log("lexical error ") ;return 27;
break;
case 71:console.log("lexical error ") ;return 27;
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:boolean\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:char\b)/i,/^(?:continue\b)/i,/^(?:def\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:double\b)/i,/^(?:elif\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:int\b)/i,/^(?:length\b)/i,/^(?:new\b)/i,/^(?:pop\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:push\b)/i,/^(?:return\b)/i,/^(?:round\b)/i,/^(?:run\b)/i,/^(?:string\b)/i,/^(?:switch\b)/i,/^(?:tochararray\b)/i,/^(?:tolower\b)/i,/^(?:tostring\b)/i,/^(?:toupper\b)/i,/^(?:(true|false))/i,/^(?:typeof\b)/i,/^(?:until\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:[ \t\r\n\f])/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"[^\"^\n]*")/i,/^(?:[']([\40-\176]|(\$[{][0-9]{1,3}[}]))['])/i,/^(?:[\w_]+[\w\d_]*)/i,/^(?:$)/i,/^(?:[^])/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}