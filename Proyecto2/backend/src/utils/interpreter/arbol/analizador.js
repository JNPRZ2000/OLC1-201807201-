/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14,18,21,36,40],$V1=[1,32],$V2=[1,30],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,31],$Va=[1,40],$Vb=[1,39],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[17,20,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59],$Vp=[19,36,45,51,60,61,62,63,64],$Vq=[17,20,44,45,46,52,53,54,55,56,57,58,59],$Vr=[17,20,44,45,46,47,48,50,52,53,54,55,56,57,58,59],$Vs=[17,20,44,52,53],$Vt=[17,20,44,52,53,58,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"instruccion":5,"PTCOMA":6,"EOF":7,"operacion":8,"execImprimir":9,"execImprimirln":10,"execPop":11,"execPush":12,"execRun":13,"REVALUAR":14,"CORI":15,"expresion":16,"CORD":17,"Rprint":18,"PARI":19,"PARD":20,"RprintLn":21,"functToLower":22,"RtoLower":23,"functToUpper":24,"RtoUpper":25,"functRound":26,"Rround":27,"functLength":28,"Rlength":29,"functTypeOf":30,"RtypeOf":31,"functToString":32,"RtoString":33,"functToCharArray":34,"RtoCharArray":35,"ID":36,"PTO":37,"Rpush":38,"Rpop":39,"Rrun":40,"listaValores":41,"ejecutarMetodo":42,"valores":43,"COMA":44,"MENOS":45,"MAS":46,"POR":47,"DIVIDIDO":48,"POTENCIA":49,"MOD":50,"NOT":51,"OR":52,"AND":53,"MAYOR":54,"MAYORI":55,"MENOR":56,"MENORI":57,"ESIGUAL":58,"DIFERENTE":59,"ENTERO":60,"DECIMAL":61,"CADENA":62,"CHAR":63,"BOOLEAN":64,"tipoDato":65,"Rboolean":66,"Rstring":67,"Rchar":68,"Rint":69,"Rdouble":70,"casteo":71,"declaraVectorU":72,"IGUAL":73,"decVecU":74,"Rnew":75,"LLAVEI":76,"LLAVED":77,"declaraVectorD":78,"decVecD":79,"decVecDE":80,"epsilon":81,"accesoVectorU":82,"accesoVectorD":83,"modificarVector":84,"accesoVector":85,"sentenciaIf":86,"Rif":87,"sentTransf":88,"sentenciaElif":89,"sentenciaElse":90,"Relif":91,"Relse":92,"sentenciaSwitch":93,"secuenciaSwitch":94,"Rswitch":95,"caseLista":96,"defaultInstruct":97,"OR2":98,"casesOP":99,"Rcase":100,"DOSPUNTOS":101,"Rdefault":102,"sentenciaBreak":103,"Rbreak":104,"sentenciaContinue":105,"Rcontinue":106,"sentenciaReturn":107,"Rreturn":108,"retornoValor":109,"cicloWhile":110,"Rwhile":111,"cicloFor":112,"Rfor":113,"inicioFor":114,"actualizacion":115,"incremento":116,"decremento":117,"declaracion":118,"asignacion":119,"asignDec":120,"cicloDoWhile":121,"Rdo":122,"cicloDoUntil":123,"Runtil":124,"declaraFuncion":125,"parametros":126,"declaraMetodo":127,"Rvoid":128,"otroParam":129,"llamarFunMet":130,"$accept":0,"$end":1},
terminals_: {2:"error",6:"PTCOMA",7:"EOF",14:"REVALUAR",15:"CORI",17:"CORD",18:"Rprint",19:"PARI",20:"PARD",21:"RprintLn",23:"RtoLower",25:"RtoUpper",27:"Rround",29:"Rlength",31:"RtypeOf",33:"RtoString",35:"RtoCharArray",36:"ID",37:"PTO",38:"Rpush",39:"Rpop",40:"Rrun",44:"COMA",45:"MENOS",46:"MAS",47:"POR",48:"DIVIDIDO",49:"POTENCIA",50:"MOD",51:"NOT",52:"OR",53:"AND",54:"MAYOR",55:"MAYORI",56:"MENOR",57:"MENORI",58:"ESIGUAL",59:"DIFERENTE",60:"ENTERO",61:"DECIMAL",62:"CADENA",63:"CHAR",64:"BOOLEAN",66:"Rboolean",67:"Rstring",68:"Rchar",69:"Rint",70:"Rdouble",73:"IGUAL",75:"Rnew",76:"LLAVEI",77:"LLAVED",81:"epsilon",87:"Rif",91:"Relif",92:"Relse",95:"Rswitch",98:"OR2",100:"Rcase",101:"DOSPUNTOS",102:"Rdefault",104:"Rbreak",106:"Rcontinue",108:"Rreturn",111:"Rwhile",113:"Rfor",122:"Rdo",124:"Runtil",128:"Rvoid"},
productions_: [0,[3,1],[4,2],[4,2],[4,2],[4,1],[4,0],[5,1],[5,1],[5,1],[5,1],[5,1],[5,1],[8,5],[9,5],[10,5],[22,4],[24,4],[26,4],[28,4],[30,4],[32,4],[34,4],[12,7],[11,6],[13,6],[42,5],[41,2],[43,3],[43,0],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,3],[65,1],[65,1],[65,1],[65,1],[65,1],[71,4],[72,7],[74,5],[74,3],[78,9],[79,8],[79,6],[80,5],[80,1],[82,4],[83,7],[84,4],[85,1],[85,1],[86,10],[89,9],[89,0],[90,5],[90,0],[93,9],[94,10],[94,0],[96,6],[99,6],[99,0],[97,4],[97,0],[103,2],[103,0],[105,2],[105,0],[107,3],[107,0],[88,1],[88,1],[88,1],[109,1],[109,0],[110,8],[112,11],[115,1],[115,1],[115,1],[114,1],[114,1],[118,4],[120,2],[120,0],[119,4],[116,3],[117,3],[121,10],[123,10],[125,10],[127,9],[126,3],[126,0],[129,4],[129,0],[130,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
 
		console.error('Este es un error sintáctico[SE RECUPERA AL HALLAR EL CARACTER: \";\""]:\n\t' 
		+ "Se obtuvo: " + yytext + ', L: ' + this._$.first_line + ', C: ' + this._$.first_column); 
break;
case 4:
 
		console.error('Este es un error sintáctico[EOF]:\n\t' 
		+ "Se obtuvo: " + yytext + ', L: ' + this._$.first_line + ', C: ' + this._$.first_column); 
break;
case 5:
 
		console.error('Este es un error sintáctico[IRRECUPERABLE|DESCONOCIDO]:\n\t' 
		+ "Se obtuvo: " + yytext + ', L: ' + this._$.first_line + ', C: ' + this._$.first_column); 
break;
case 13:

		console.log('El valor de la expresión es: ' + $$[$0-2]);
	
break;
case 14:

        this.$=new impresion.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 15:

		console.log(`PRINTLN: ${$$[$0-2]}`);
	
break;
case 30:
 this.$ = $$[$0] *-1; 
break;
case 31:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 32:
 this.$ = $$[$0-2] - $$[$0]; 
break;
case 33:
 this.$ = $$[$0-2] * $$[$0]; 
break;
case 34:
 this.$ = $$[$0-2] / $$[$0]; 
break;
case 35:
 this.$ = $$[$0-2] ** $$[$0]; 
break;
case 36:
 this.$ = $$[$0-2] % $$[$0]; 
break;
case 46:
 this.$= new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 47:
 this.$ = Number($$[$0]); 
break;
case 48:
 this.$= new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 49: case 50: case 51:
 this.$ = $$[$0]; 
break;
case 52:
 this.$ = $$[$0-1]; 
break;
case 85: case 87:
 this.$ = true; 
break;
case 86: case 88: case 90:
 this.$ = null; 
break;
}
},
table: [o($V0,[2,6],{3:1,4:2,2:[1,3]}),{1:[3]},{1:[2,1],5:4,8:5,9:6,10:7,11:8,12:9,13:10,14:[1,11],18:[1,12],21:[1,13],36:[1,14],40:[1,15]},o($V0,[2,5],{6:[1,16],7:[1,17]}),o($V0,[2,2]),o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),{15:[1,18]},{19:[1,19]},{19:[1,20]},{37:[1,21]},{36:[1,22]},o($V0,[2,3]),o($V0,[2,4]),{16:23,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:33,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:34,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{38:[1,36],39:[1,35]},{19:[1,37]},{17:[1,38],45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn},{16:53,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:54,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},o($Vo,[2,46]),o($Vo,[2,47]),o($Vo,[2,48]),o($Vo,[2,49]),o($Vo,[2,50]),o($Vo,[2,51]),{16:55,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{20:[1,56],45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn},{20:[1,57],45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn},{19:[1,58]},{19:[1,59]},o($Vp,[2,29],{41:60,43:61}),{6:[1,62]},{16:63,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:64,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:65,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:66,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:67,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:68,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:69,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:70,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:71,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:72,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:73,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:74,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:75,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{16:76,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},o($Vo,[2,30]),o($Vo,[2,37]),{20:[1,77],45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn},{6:[1,78]},{6:[1,79]},{20:[1,80]},{16:81,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},{20:[1,82]},{16:83,19:$V1,36:$V2,45:$V3,51:$V4,60:$V5,61:$V6,62:$V7,63:$V8,64:$V9},o($V0,[2,13]),o($Vq,[2,31],{47:$Vc,48:$Vd,49:$Ve,50:$Vf}),o($Vq,[2,32],{47:$Vc,48:$Vd,49:$Ve,50:$Vf}),o($Vr,[2,33],{49:$Ve}),o($Vr,[2,34],{49:$Ve}),o($Vo,[2,35]),o([17,20,44,45,46,50,52,53,54,55,56,57,58,59],[2,36],{47:$Vc,48:$Vd,49:$Ve}),o([17,20,44,52],[2,38],{45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn}),o($Vs,[2,39],{45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn}),o($Vt,[2,40],{45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf}),o($Vt,[2,41],{45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf}),o($Vt,[2,42],{45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf}),o($Vt,[2,43],{45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf}),o($Vs,[2,44],{45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,54:$Vi,55:$Vj,56:$Vk,57:$Vl}),o($Vs,[2,45],{45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,54:$Vi,55:$Vj,56:$Vk,57:$Vl}),o($Vo,[2,52]),o($V0,[2,14]),o($V0,[2,15]),{6:[1,84]},{20:[1,85],45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn},{6:[1,86]},{20:[2,27],44:[1,87],45:$Va,46:$Vb,47:$Vc,48:$Vd,49:$Ve,50:$Vf,52:$Vg,53:$Vh,54:$Vi,55:$Vj,56:$Vk,57:$Vl,58:$Vm,59:$Vn},o($V0,[2,24]),{6:[1,88]},o($V0,[2,25]),o($Vp,[2,28]),o($V0,[2,23])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    //const controller = require('../../../controller/parser/parser');
    const nativo = require('./expresions/Native');
    const Tipo = require('./symbol/Type');
    //const errores = require('./Exceptions/Error');
    const impresion = require('./instructions/Imprimir');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log(`CL >>> ${yy_.yytext}`);
break;
case 1:console.log(`CB >>> ${yy_.yytext}`);
break;
case 2:return 66;
break;
case 3:return 104;
break;
case 4:return 100;
break;
case 5:return 68;
break;
case 6:return 106;
break;
case 7:return 102;
break;
case 8:return 122;
break;
case 9:return 70;
break;
case 10:return 91;
break;
case 11:return 92;
break;
case 12:return 14;
break;
case 13:return 113;
break;
case 14:return 87;
break;
case 15:return 69;
break;
case 16:return 29;
break;
case 17:return 75;
break;
case 18:return 39;
break;
case 19:return 18;
break;
case 20:return 21;
break;
case 21:return 38;
break;
case 22:return 108;
break;
case 23:return 27;
break;
case 24:return 40;
break;
case 25:return 67;
break;
case 26:return 95;
break;
case 27:return 35;
break;
case 28:return 23;
break;
case 29:return 33;
break;
case 30:return 25;
break;
case 31:return 64
break;
case 32:return 31;
break;
case 33:return 124;
break;
case 34:return 128;
break;
case 35:return 111;
break;
case 36:return 6;
break;
case 37:return 44;
break;
case 38:return 37;
break;
case 39:return 19;
break;
case 40:return 20;
break;
case 41:return 15;
break;
case 42:return 17;
break;
case 43:return 76;
break;
case 44:return 77;
break;
case 45:return 46;
break;
case 46:return 45;
break;
case 47:return 47;
break;
case 48:return 48;
break;
case 49:return 49;
break;
case 50:return 50;
break;
case 51:return 54;
break;
case 52:return 56;
break;
case 53:return 73;
break;
case 54:return 55;
break;
case 55:return 57;
break;
case 56:return 58;
break;
case 57:return 59;
break;
case 58:return 98
break;
case 59:return 52;
break;
case 60:return 53;
break;
case 61:return 51;
break;
case 62:return 'INTERROGACION';
break;
case 63:return 101;
break;
case 64:
break;
case 65:return 61;
break;
case 66:return 60;
break;
case 67:return 62;
break;
case 68:return 63;
break;
case 69:return 36;
break;
case 70:return 7;
break;
case 71: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:boolean\b)/i,/^(?:break\b)/i,/^(?:case\b)/i,/^(?:char\b)/i,/^(?:continue\b)/i,/^(?:default\b)/i,/^(?:do\b)/i,/^(?:double\b)/i,/^(?:elif\b)/i,/^(?:else\b)/i,/^(?:Evaluar\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:int\b)/i,/^(?:length\b)/i,/^(?:new\b)/i,/^(?:pop\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:push\b)/i,/^(?:return\b)/i,/^(?:round\b)/i,/^(?:run\b)/i,/^(?:string\b)/i,/^(?:switch\b)/i,/^(?:tochararray\b)/i,/^(?:tolower\b)/i,/^(?:tostring\b)/i,/^(?:toupper\b)/i,/^(?:(true|false))/i,/^(?:typeof\b)/i,/^(?:until\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\s+)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:("|“|”)([\0-\41]|[\43-\134]|[\136-\176]|["\r""\n""\t""\\""]|(\][\0-\40]*[a-zA-Z]))+("|“|”))/i,/^(?:[']([\40-\176]|(\$[{][0-9]{1,3}[}]))['])/i,/^(?:[\w_]+[\w\d_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}