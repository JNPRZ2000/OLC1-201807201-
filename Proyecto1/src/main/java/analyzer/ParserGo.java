
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzer;

import java_cup.runtime.*;
import analyzer.ParserGoSym;
import analyzer.Lexer;
import java_cup.runtime.XMLElement;
import dao.Token;
import dao.TokenError;
import java.util.ArrayList;
import javax.swing.JTextArea;
import translator_go.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import ui.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserGo extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserGoSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserGo() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserGo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserGo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\005\000\002\052\002\000\002\053\002" +
    "\000\002\004\006\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\054\002\000\002\055\002\000\002\006\006\000\002" +
    "\006\002\000\002\007\011\000\002\011\004\000\002\012" +
    "\005\000\002\012\002\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\010\003\000" +
    "\002\014\006\000\002\015\005\000\002\015\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\007\000\002\015\005\000\002" +
    "\015\003\000\002\015\004\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\007\000\002\017\011\000" +
    "\002\020\003\000\002\021\007\000\002\021\002\000\002" +
    "\022\004\000\002\022\002\000\002\023\010\000\002\030" +
    "\003\000\002\027\003\000\002\024\004\000\002\025\007" +
    "\000\002\026\004\000\002\026\002\000\002\031\005\000" +
    "\002\031\002\000\002\032\014\000\002\033\005\000\002" +
    "\033\002\000\002\034\007\000\002\035\006\000\002\036" +
    "\005\000\002\037\003\000\002\040\007\000\002\041\010" +
    "\000\002\047\010\000\002\050\004\000\002\050\002\000" +
    "\002\051\005\000\002\051\002\000\002\042\007\000\002" +
    "\042\002\000\002\043\004\000\002\044\005\000\002\044" +
    "\002\000\002\045\005\000\002\046\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\002\uffff\041\005\001\002\000\004\002" +
    "\000\001\002\000\040\003\ufffd\021\ufffd\042\ufffa\043\ufffd" +
    "\046\ufffd\053\ufffd\056\ufffd\063\ufffd\065\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\042" +
    "\307\001\002\000\036\003\042\021\041\043\026\046\035" +
    "\053\024\056\046\063\015\065\013\067\033\070\037\071" +
    "\012\072\031\073\045\076\027\001\002\000\024\004\053" +
    "\015\055\016\054\017\060\020\051\021\063\023\061\032" +
    "\056\070\057\001\002\000\040\003\ufffd\021\ufffd\043\ufffd" +
    "\046\ufffd\053\ufffd\056\ufffd\063\ufffd\065\ufffd\066\ufffa\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd\001\002" +
    "\000\064\003\ufff0\007\ufff0\021\ufff0\042\ufff0\043\ufff0\046" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\055\ufff0\056\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\073\ufff0\075\ufff0\076\ufff0\077\ufff0" +
    "\001\002\000\024\004\053\015\055\016\054\017\060\020" +
    "\051\021\063\023\061\032\056\070\057\001\002\000\064" +
    "\003\ufff3\007\ufff3\021\ufff3\042\ufff3\043\ufff3\046\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\075\ufff3\076\ufff3\077\ufff3\001\002" +
    "\000\064\003\uffee\007\uffee\021\uffee\042\uffee\043\uffee\046" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\055\uffee\056\uffee" +
    "\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\072\uffee\073\uffee\075\uffee\076\uffee\077\uffee" +
    "\001\002\000\064\003\ufff6\007\ufff6\021\ufff6\042\ufff6\043" +
    "\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\055\ufff6" +
    "\056\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\075\ufff6\076\ufff6" +
    "\077\ufff6\001\002\000\064\003\uffef\007\uffef\021\uffef\042" +
    "\uffef\043\uffef\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\055\uffef\056\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef\075\uffef" +
    "\076\uffef\077\uffef\001\002\000\064\003\ufff7\007\ufff7\021" +
    "\ufff7\042\ufff7\043\ufff7\046\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\055\ufff7\056\ufff7\062\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7" +
    "\075\ufff7\076\ufff7\077\ufff7\001\002\000\064\003\ufffc\007" +
    "\ufffc\021\ufffc\042\ufffc\043\ufffc\046\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\055\ufffc\056\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\073\ufffc\075\ufffc\076\ufffc\077\ufffc\001\002\000\024\004" +
    "\053\015\055\016\054\017\060\020\051\021\063\023\061" +
    "\032\056\070\057\001\002\000\004\006\242\001\002\000" +
    "\004\021\041\001\002\000\004\021\226\001\002\000\064" +
    "\003\uffed\007\uffed\021\uffed\042\uffed\043\uffed\046\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\055\uffed\056\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\075\uffed\076\uffed\077\uffed\001\002" +
    "\000\024\004\053\015\055\016\054\017\060\020\051\021" +
    "\063\023\061\032\056\070\057\001\002\000\064\003\ufff8" +
    "\007\ufff8\021\ufff8\042\ufff8\043\ufff8\046\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\055\ufff8\056\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072" +
    "\ufff8\073\ufff8\075\ufff8\076\ufff8\077\ufff8\001\002\000\024" +
    "\004\053\015\055\016\054\017\060\020\051\021\063\023" +
    "\061\032\056\070\057\001\002\000\064\003\ufff4\007\ufff4" +
    "\021\ufff4\042\ufff4\043\ufff4\046\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\055\ufff4\056\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073" +
    "\ufff4\075\ufff4\076\ufff4\077\ufff4\001\002\000\024\004\053" +
    "\015\055\016\054\017\060\020\051\021\063\023\061\032" +
    "\056\070\057\001\002\000\064\003\ufff9\007\ufff9\021\ufff9" +
    "\042\ufff9\043\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\055\ufff9\056\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\075" +
    "\ufff9\076\ufff9\077\ufff9\001\002\000\004\021\176\001\002" +
    "\000\064\003\ufff1\007\ufff1\021\ufff1\042\ufff1\043\ufff1\046" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\075\ufff1\076\ufff1\077\ufff1" +
    "\001\002\000\010\006\uffe4\012\172\044\uffe4\001\002\000" +
    "\064\003\uffec\007\uffec\021\uffec\042\uffec\043\uffec\046\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\055\uffec\056\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\075\uffec\076\uffec\077\uffec\001" +
    "\002\000\064\003\ufff2\007\ufff2\021\ufff2\042\ufff2\043\ufff2" +
    "\046\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\055\ufff2\056" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\070\ufff2\071\ufff2\072\ufff2\073\ufff2\075\ufff2\076\ufff2\077" +
    "\ufff2\001\002\000\064\003\ufff5\007\ufff5\021\ufff5\042\ufff5" +
    "\043\ufff5\046\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\055" +
    "\ufff5\056\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\075\ufff5\076" +
    "\ufff5\077\ufff5\001\002\000\004\021\150\001\002\000\004" +
    "\021\047\001\002\000\004\006\050\001\002\000\024\004" +
    "\053\015\055\016\054\017\060\020\051\021\063\023\061" +
    "\032\056\070\057\001\002\000\142\003\uffc7\005\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\042\uffc7\043\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\075\uffc7\076\uffc7\077\uffc7" +
    "\001\002\000\142\003\uffce\005\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\014\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\062\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072" +
    "\uffce\073\uffce\075\uffce\076\uffce\077\uffce\001\002\000\024" +
    "\004\053\015\055\016\054\017\060\020\051\021\063\023" +
    "\061\032\056\070\057\001\002\000\142\003\uffc9\005\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\042\uffc9\043\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9" +
    "\070\uffc9\071\uffc9\072\uffc9\073\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\001\002\000\142\003\uffca\005\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\014\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\062\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca" +
    "\072\uffca\073\uffca\075\uffca\076\uffca\077\uffca\001\002\000" +
    "\024\004\053\015\055\016\054\017\060\020\051\021\063" +
    "\023\061\032\056\070\057\001\002\000\004\021\134\001" +
    "\002\000\142\003\uffc8\005\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\014\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\075\uffc8\076\uffc8\077\uffc8\001\002\000\024\004" +
    "\053\015\055\016\054\017\060\020\051\021\063\023\061" +
    "\032\056\070\057\001\002\000\040\022\070\023\100\024" +
    "\064\025\076\026\075\027\066\030\065\031\102\033\074" +
    "\034\067\035\073\036\077\037\071\040\101\057\072\001" +
    "\002\000\142\003\uffcb\005\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\014\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb" +
    "\073\uffcb\075\uffcb\076\uffcb\077\uffcb\001\002\000\024\004" +
    "\053\015\055\016\054\017\060\020\051\021\063\023\061" +
    "\032\056\070\057\001\002\000\024\004\053\015\055\016" +
    "\054\017\060\020\051\021\063\023\061\032\056\070\057" +
    "\001\002\000\004\013\126\001\002\000\024\004\053\015" +
    "\055\016\054\017\060\020\051\021\063\023\061\032\056" +
    "\070\057\001\002\000\024\004\053\015\055\016\054\017" +
    "\060\020\051\021\063\023\061\032\056\070\057\001\002" +
    "\000\024\004\053\015\055\016\054\017\060\020\051\021" +
    "\063\023\061\032\056\070\057\001\002\000\024\004\053" +
    "\015\055\016\054\017\060\020\051\021\063\023\061\032" +
    "\056\070\057\001\002\000\024\004\053\015\055\016\054" +
    "\017\060\020\051\021\063\023\061\032\056\070\057\001" +
    "\002\000\024\004\053\015\055\016\054\017\060\020\051" +
    "\021\063\023\061\032\056\070\057\001\002\000\024\004" +
    "\053\015\055\016\054\017\060\020\051\021\063\023\061" +
    "\032\056\070\057\001\002\000\024\004\053\015\055\016" +
    "\054\017\060\020\051\021\063\023\061\032\056\070\057" +
    "\001\002\000\024\004\053\015\055\016\054\017\060\020" +
    "\051\021\063\023\061\032\056\070\057\001\002\000\024" +
    "\004\053\015\055\016\054\017\060\020\051\021\063\023" +
    "\061\032\056\070\057\001\002\000\024\004\053\015\055" +
    "\016\054\017\060\020\051\021\063\023\061\032\056\070" +
    "\057\001\002\000\024\004\053\015\055\016\054\017\060" +
    "\020\051\021\063\023\061\032\056\070\057\001\002\000" +
    "\142\003\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\014\uffdc\021\uffdc\022\070\023\100\024\064\025\076\026" +
    "\075\027\066\030\065\031\uffdc\033\074\034\067\035\073" +
    "\036\077\037\071\040\101\042\uffdc\043\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc" +
    "\075\uffdc\076\uffdc\077\uffdc\001\002\000\136\003\uffd6\005" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\021\uffd6" +
    "\022\070\023\100\024\064\025\076\026\075\027\066\030" +
    "\uffd6\031\uffd6\033\074\034\067\035\073\036\077\042\uffd6" +
    "\043\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\062\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\075\uffd6\076\uffd6\077\uffd6\001\002" +
    "\000\142\003\uffd3\005\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\014\uffd3\021\uffd3\022\uffd3\023\uffd3\024\064\025\076" +
    "\026\075\027\066\030\uffd3\031\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\001\002\000\132\003\uffd7" +
    "\005\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7\021" +
    "\uffd7\022\070\023\100\024\064\025\076\026\075\027\066" +
    "\030\uffd7\031\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\075\uffd7\076\uffd7\077\uffd7\001\002\000\142\003" +
    "\uffcf\005\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\066\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\042\uffcf\043\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\075\uffcf" +
    "\076\uffcf\077\uffcf\001\002\000\142\003\uffd1\005\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\014\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\064\025\076\026\uffd1\027\066\030\uffd1\031" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\042\uffd1\043\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070" +
    "\uffd1\071\uffd1\072\uffd1\073\uffd1\075\uffd1\076\uffd1\077\uffd1" +
    "\001\002\000\132\003\uffda\005\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\014\uffda\021\uffda\022\070\023\100\024\064" +
    "\025\076\026\075\027\066\030\uffda\031\uffda\037\uffda\040" +
    "\uffda\042\uffda\043\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda" +
    "\070\uffda\071\uffda\072\uffda\073\uffda\075\uffda\076\uffda\077" +
    "\uffda\001\002\000\132\003\uffd8\005\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\014\uffd8\021\uffd8\022\070\023\100\024" +
    "\064\025\076\026\075\027\066\030\uffd8\031\uffd8\037\uffd8" +
    "\040\uffd8\042\uffd8\043\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\075\uffd8\076\uffd8" +
    "\077\uffd8\001\002\000\042\022\070\023\100\024\064\025" +
    "\076\026\075\027\066\030\065\031\102\033\074\034\067" +
    "\035\073\036\077\037\071\040\101\054\uffb4\060\115\001" +
    "\002\000\004\054\120\001\002\000\004\061\116\001\002" +
    "\000\024\004\053\015\055\016\054\017\060\020\051\021" +
    "\063\023\061\032\056\070\057\001\002\000\040\022\070" +
    "\023\100\024\064\025\076\026\075\027\066\030\065\031" +
    "\102\033\074\034\067\035\073\036\077\037\071\040\101" +
    "\054\uffb5\001\002\000\040\003\ufffd\021\ufffd\043\ufffd\046" +
    "\ufffd\053\ufffd\056\ufffd\062\ufffa\063\ufffd\065\ufffd\067\ufffd" +
    "\070\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd\001\002\000" +
    "\004\062\122\001\002\000\064\003\uffb6\007\uffb6\021\uffb6" +
    "\042\uffb6\043\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\055\uffb6\056\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\001\002\000\136\003\uffd5\005\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5\021\uffd5\022" +
    "\070\023\100\024\064\025\076\026\075\027\066\030\uffd5" +
    "\031\uffd5\033\074\034\067\035\073\036\077\042\uffd5\043" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5" +
    "\072\uffd5\073\uffd5\075\uffd5\076\uffd5\077\uffd5\001\002\000" +
    "\142\003\uffd4\005\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\014\uffd4\021\uffd4\022\uffd4\023\uffd4\024\064\025\076\026" +
    "\075\027\066\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\062\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\075\uffd4\076\uffd4\077\uffd4\001\002\000\132\003\uffd9\005" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\014\uffd9\021\uffd9" +
    "\022\070\023\100\024\064\025\076\026\075\027\066\030" +
    "\uffd9\031\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073" +
    "\uffd9\075\uffd9\076\uffd9\077\uffd9\001\002\000\024\004\053" +
    "\015\055\016\054\017\060\020\051\021\063\023\061\032" +
    "\056\070\057\001\002\000\040\014\130\022\070\023\100" +
    "\024\064\025\076\026\075\027\066\030\065\031\102\033" +
    "\074\034\067\035\073\036\077\037\071\040\101\001\002" +
    "\000\142\003\uffd0\005\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\014\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\142\003\uffdd" +
    "\005\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\021" +
    "\uffdd\022\070\023\100\024\064\025\076\026\075\027\066" +
    "\030\uffdd\031\uffdd\033\074\034\067\035\073\036\077\037" +
    "\071\040\101\042\uffdd\043\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\075\uffdd\076" +
    "\uffdd\077\uffdd\001\002\000\142\003\uffd2\005\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\014\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\066\030\uffd2\031\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\042" +
    "\uffd2\043\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\075\uffd2\076\uffd2\077\uffd2\001" +
    "\002\000\142\003\uffcd\005\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\014\uffcd\021\uffcd\022\uffcd\023\uffcd\024\064\025" +
    "\076\026\075\027\066\030\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd" +
    "\073\uffcd\075\uffcd\076\uffcd\077\uffcd\001\002\000\004\004" +
    "\135\001\002\000\026\004\053\005\uffab\015\055\016\054" +
    "\017\060\020\051\021\063\023\061\032\056\070\057\001" +
    "\002\000\004\005\144\001\002\000\042\005\uffa9\012\140" +
    "\022\070\023\100\024\064\025\076\026\075\027\066\030" +
    "\065\031\102\033\074\034\067\035\073\036\077\037\071" +
    "\040\101\001\002\000\024\004\053\015\055\016\054\017" +
    "\060\020\051\021\063\023\061\032\056\070\057\001\002" +
    "\000\004\005\uffac\001\002\000\042\005\uffa9\012\140\022" +
    "\070\023\100\024\064\025\076\026\075\027\066\030\065" +
    "\031\102\033\074\034\067\035\073\036\077\037\071\040" +
    "\101\001\002\000\004\005\uffaa\001\002\000\142\003\uffc6" +
    "\005\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\042\uffc6\043\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\075\uffc6\076" +
    "\uffc6\077\uffc6\001\002\000\142\003\uffdb\005\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\014\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042" +
    "\uffdb\043\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb" +
    "\071\uffdb\072\uffdb\073\uffdb\075\uffdb\076\uffdb\077\uffdb\001" +
    "\002\000\040\005\147\022\070\023\100\024\064\025\076" +
    "\026\075\027\066\030\065\031\102\033\074\034\067\035" +
    "\073\036\077\037\071\040\101\001\002\000\142\003\uffcc" +
    "\005\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\042\uffcc\043\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\075\uffcc\076" +
    "\uffcc\077\uffcc\001\002\000\042\003\uffa7\021\uffa7\043\uffa7" +
    "\046\uffa7\053\uffa7\056\uffa7\063\uffa7\065\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\074\152\075\uffa7\076\uffa7" +
    "\001\002\000\040\003\ufffd\021\ufffd\043\ufffd\046\ufffd\053" +
    "\ufffd\056\ufffd\063\ufffd\065\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\073\ufffd\075\ufffa\076\ufffd\001\002\000\004\004" +
    "\153\001\002\000\004\021\155\001\002\000\006\005\uffa4" +
    "\012\163\001\002\000\012\100\161\101\160\102\156\103" +
    "\162\001\002\000\050\003\uffe3\005\uffe3\012\uffe3\021\uffe3" +
    "\043\uffe3\045\uffe3\046\uffe3\053\uffe3\056\uffe3\063\uffe3\065" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\076\uffe3\077\uffe3\001\002\000\006\005\uffa6\012\uffa6\001" +
    "\002\000\050\003\uffe2\005\uffe2\012\uffe2\021\uffe2\043\uffe2" +
    "\045\uffe2\046\uffe2\053\uffe2\056\uffe2\063\uffe2\065\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\076\uffe2" +
    "\077\uffe2\001\002\000\050\003\uffe1\005\uffe1\012\uffe1\021" +
    "\uffe1\043\uffe1\045\uffe1\046\uffe1\053\uffe1\056\uffe1\063\uffe1" +
    "\065\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\076\uffe1\077\uffe1\001\002\000\050\003\uffe0\005\uffe0" +
    "\012\uffe0\021\uffe0\043\uffe0\045\uffe0\046\uffe0\053\uffe0\056" +
    "\uffe0\063\uffe0\065\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0" +
    "\073\uffe0\074\uffe0\076\uffe0\077\uffe0\001\002\000\004\021" +
    "\155\001\002\000\004\005\165\001\002\000\042\003\uffa8" +
    "\021\uffa8\043\uffa8\046\uffa8\053\uffa8\056\uffa8\063\uffa8\065" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\075\uffa8" +
    "\076\uffa8\077\uffa8\001\002\000\006\005\uffa4\012\163\001" +
    "\002\000\004\005\uffa5\001\002\000\004\075\171\001\002" +
    "\000\064\003\uffaf\007\uffaf\021\uffaf\042\uffaf\043\uffaf\046" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\072\uffaf\073\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\001\002\000\004\021\174\001\002\000\006\006\uffe6\044" +
    "\uffe6\001\002\000\010\006\uffe4\012\172\044\uffe4\001\002" +
    "\000\006\006\uffe5\044\uffe5\001\002\000\004\004\177\001" +
    "\002\000\026\004\053\005\uffab\015\055\016\054\017\060" +
    "\020\051\021\063\023\061\032\056\070\057\001\002\000" +
    "\004\005\201\001\002\000\004\011\202\001\002\000\064" +
    "\003\uffad\007\uffad\021\uffad\042\uffad\043\uffad\046\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad\062\uffad" +
    "\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\071" +
    "\uffad\072\uffad\073\uffad\075\uffad\076\uffad\077\uffad\001\002" +
    "\000\004\047\205\001\002\000\126\003\uffc4\007\uffc4\011" +
    "\uffc4\021\uffc4\022\070\023\100\024\064\025\076\026\075" +
    "\027\066\030\065\031\102\033\074\034\067\035\073\036" +
    "\077\037\071\040\101\042\uffc4\043\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\071\uffc4\072\uffc4\073\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\001\002\000\044\003\ufffd\021\ufffd\043\ufffd\046\ufffd" +
    "\050\ufffa\051\ufffa\052\ufffa\053\ufffd\056\ufffd\063\ufffd\065" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd" +
    "\001\002\000\010\050\uffc2\051\210\052\uffc2\001\002\000" +
    "\006\050\215\052\uffc0\001\002\000\024\004\053\015\055" +
    "\016\054\017\060\020\051\021\063\023\061\032\056\070" +
    "\057\001\002\000\004\047\212\001\002\000\044\003\ufffd" +
    "\021\ufffd\043\ufffd\046\ufffd\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffd\056\ufffd\063\ufffd\065\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\073\ufffd\076\ufffd\001\002\000\010\050\uffc2\051" +
    "\210\052\uffc2\001\002\000\006\050\uffc3\052\uffc3\001\002" +
    "\000\040\003\ufffd\021\ufffd\043\ufffd\046\ufffd\052\ufffa\053" +
    "\ufffd\056\ufffd\063\ufffd\065\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\073\ufffd\076\ufffd\001\002\000\004\052\217\001" +
    "\002\000\064\003\uffc5\007\uffc5\021\uffc5\042\uffc5\043\uffc5" +
    "\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5\056" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5" +
    "\070\uffc5\071\uffc5\072\uffc5\073\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\001\002\000\004\052\uffc1\001\002\000\004\011\223" +
    "\001\002\000\004\011\uffb0\001\002\000\064\003\uffb1\007" +
    "\uffb1\021\uffb1\042\uffb1\043\uffb1\046\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\055\uffb1\056\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\073\uffb1\075\uffb1\076\uffb1\077\uffb1\001\002\000\040\011" +
    "\225\022\070\023\100\024\064\025\076\026\075\027\066" +
    "\030\065\031\102\033\074\034\067\035\073\036\077\037" +
    "\071\040\101\001\002\000\064\003\uffa2\007\uffa2\021\uffa2" +
    "\042\uffa2\043\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\055\uffa2\056\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\075" +
    "\uffa2\076\uffa2\077\uffa2\001\002\000\012\100\161\101\160" +
    "\102\156\103\162\001\002\000\042\003\uffa7\021\uffa7\043" +
    "\uffa7\046\uffa7\053\uffa7\056\uffa7\063\uffa7\065\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\152\076\uffa7\077" +
    "\uffa7\001\002\000\040\003\ufffd\021\ufffd\043\ufffd\046\ufffd" +
    "\053\ufffd\056\ufffd\063\ufffd\065\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\076\ufffd\077\ufffa\001\002\000\004" +
    "\077\232\001\002\000\064\003\uffae\007\uffae\021\uffae\042" +
    "\uffae\043\uffae\046\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\055\uffae\056\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\075\uffae" +
    "\076\uffae\077\uffae\001\002\000\004\044\234\001\002\000" +
    "\012\100\161\101\160\102\156\103\162\001\002\000\004" +
    "\045\236\001\002\000\024\004\053\015\055\016\054\017" +
    "\060\020\051\021\063\023\061\032\056\070\057\001\002" +
    "\000\004\011\241\001\002\000\040\011\uffdf\022\070\023" +
    "\100\024\064\025\076\026\075\027\066\030\065\031\102" +
    "\033\074\034\067\035\073\036\077\037\071\040\101\001" +
    "\002\000\064\003\uffe7\007\uffe7\021\uffe7\042\uffe7\043\uffe7" +
    "\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\055\uffe7\056" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\071\uffe7\072\uffe7\073\uffe7\075\uffe7\076\uffe7\077" +
    "\uffe7\001\002\000\024\004\053\015\055\016\054\017\060" +
    "\020\051\021\063\023\061\032\056\070\057\001\002\000" +
    "\004\011\244\001\002\000\064\003\uffde\007\uffde\021\uffde" +
    "\042\uffde\043\uffde\046\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\055\uffde\056\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde\075" +
    "\uffde\076\uffde\077\uffde\001\002\000\004\054\247\001\002" +
    "\000\042\010\uffbd\022\070\023\100\024\064\025\076\026" +
    "\075\027\066\030\065\031\102\033\074\034\067\035\073" +
    "\036\077\037\071\040\101\054\uffbd\001\002\000\004\007" +
    "\252\001\002\000\010\007\252\050\uffb9\055\uffb9\001\002" +
    "\000\006\050\257\055\uffb7\001\002\000\024\004\053\015" +
    "\055\016\054\017\060\020\051\021\063\023\061\032\056" +
    "\070\057\001\002\000\004\010\254\001\002\000\004\047" +
    "\255\001\002\000\044\003\ufffd\007\ufffa\021\ufffd\043\ufffd" +
    "\046\ufffd\050\ufffa\053\ufffd\055\ufffa\056\ufffd\063\ufffd\065" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\076\ufffd" +
    "\001\002\000\010\007\uffbb\050\uffbb\055\uffbb\001\002\000" +
    "\004\047\262\001\002\000\004\055\261\001\002\000\064" +
    "\003\uffbf\007\uffbf\021\uffbf\042\uffbf\043\uffbf\046\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\055\uffbf\056\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\075\uffbf\076\uffbf\077\uffbf\001\002" +
    "\000\040\003\ufffd\021\ufffd\043\ufffd\046\ufffd\053\ufffd\055" +
    "\ufffa\056\ufffd\063\ufffd\065\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\072\ufffd\073\ufffd\076\ufffd\001\002\000\004\055\uffb8\001" +
    "\002\000\004\055\uffbe\001\002\000\010\007\252\050\uffb9" +
    "\055\uffb9\001\002\000\006\050\uffbc\055\uffbc\001\002\000" +
    "\006\050\uffba\055\uffba\001\002\000\064\003\uffeb\007\uffe8" +
    "\021\uffeb\042\uffe8\043\uffeb\046\uffeb\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffeb\055\uffe8\056\uffeb\062\uffe8\063\uffeb\064\uffe8" +
    "\065\uffeb\066\uffe8\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\075\uffe8\076\uffeb\077\uffe8\001\002\000\036\003\042" +
    "\021\041\043\026\046\035\053\024\056\046\063\015\065" +
    "\013\067\033\070\037\071\012\072\031\073\045\076\027" +
    "\001\002\000\030\007\ufffb\042\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\055\ufffb\062\ufffb\064\ufffb\066\ufffb\075\ufffb\077\ufffb" +
    "\001\002\000\064\003\uffea\007\uffea\021\uffea\042\uffea\043" +
    "\uffea\046\uffea\050\uffea\051\uffea\052\uffea\053\uffea\055\uffea" +
    "\056\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\072\uffea\073\uffea\075\uffea\076\uffea" +
    "\077\uffea\001\002\000\064\003\uffeb\007\uffe8\021\uffeb\042" +
    "\uffe8\043\uffeb\046\uffeb\050\uffe8\051\uffe8\052\uffe8\053\uffeb" +
    "\055\uffe8\056\uffeb\062\uffe8\063\uffeb\064\uffe8\065\uffeb\066" +
    "\uffe8\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075\uffe8" +
    "\076\uffeb\077\uffe8\001\002\000\030\007\uffe9\042\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\055\uffe9\062\uffe9\064\uffe9\066\uffe9" +
    "\075\uffe9\077\uffe9\001\002\000\004\054\277\001\002\000" +
    "\040\003\ufffd\021\ufffd\043\ufffd\046\ufffd\053\ufffd\056\ufffd" +
    "\063\ufffd\064\ufffa\065\ufffd\067\ufffd\070\ufffd\071\ufffd\072" +
    "\ufffd\073\ufffd\076\ufffd\001\002\000\004\064\301\001\002" +
    "\000\064\003\uffb3\007\uffb3\021\uffb3\042\uffb3\043\uffb3\046" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\001\002\000\004\066\303\001\002\000\024\004\053\015" +
    "\055\016\054\017\060\020\051\021\063\023\061\032\056" +
    "\070\057\001\002\000\064\003\uffb2\007\uffb2\021\uffb2\042" +
    "\uffb2\043\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\055\uffb2\056\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\075\uffb2" +
    "\076\uffb2\077\uffb2\001\002\000\040\011\306\022\070\023" +
    "\100\024\064\025\076\026\075\027\066\030\065\031\102" +
    "\033\074\034\067\035\073\036\077\037\071\040\101\001" +
    "\002\000\064\003\uffa3\007\uffa3\021\uffa3\042\uffa3\043\uffa3" +
    "\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\055\uffa3\056" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\073\uffa3\075\uffa3\076\uffa3\077" +
    "\uffa3\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\004\007\052\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\005\022\007" +
    "\035\011\024\014\031\017\021\023\017\032\043\034\033" +
    "\035\015\036\042\040\037\041\013\045\020\046\016\047" +
    "\027\001\001\000\006\015\304\016\051\001\001\000\006" +
    "\004\301\052\010\001\001\000\002\001\001\000\010\015" +
    "\203\016\051\020\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\267\001\001\000\010\015\245\016\051" +
    "\027\244\001\001\000\002\001\001\000\004\011\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\223" +
    "\016\051\001\001\000\002\001\001\000\012\015\203\016" +
    "\051\020\221\037\220\001\001\000\002\001\001\000\010" +
    "\015\203\016\051\020\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\061\016\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\145\016\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\144\016\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\132\016\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\131\016\051\001\001\000\006\015\130\016\051\001\001" +
    "\000\002\001\001\000\006\015\124\016\051\001\001\000" +
    "\006\015\123\016\051\001\001\000\006\015\122\016\051" +
    "\001\001\000\006\015\112\016\051\001\001\000\006\015" +
    "\111\016\051\001\001\000\006\015\110\016\051\001\001" +
    "\000\006\015\107\016\051\001\001\000\006\015\106\016" +
    "\051\001\001\000\006\015\105\016\051\001\001\000\006" +
    "\015\104\016\051\001\001\000\006\015\103\016\051\001" +
    "\001\000\006\015\102\016\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\116\016\051\001\001\000\002" +
    "\001\001\000\006\004\120\052\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\126\016\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\136\016\051\050\135\001\001\000\002\001\001\000\004" +
    "\051\140\001\001\000\006\015\141\016\051\001\001\000" +
    "\002\001\001\000\004\051\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\150\001\001\000\006\004\167" +
    "\052\010\001\001\000\002\001\001\000\004\043\153\001" +
    "\001\000\004\044\163\001\001\000\004\013\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\136" +
    "\016\051\050\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\205\052\010\001\001\000\004\021\206\001" +
    "\001\000\004\022\215\001\001\000\010\015\203\016\051" +
    "\020\210\001\001\000\002\001\001\000\006\004\212\052" +
    "\010\001\001\000\004\021\213\001\001\000\002\001\001" +
    "\000\006\004\217\052\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\226\001\001\000\004\042\227\001\001" +
    "\000\006\004\230\052\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\234\001\001" +
    "\000\002\001\001\000\010\010\236\015\237\016\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\242\015\237\016\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\250\025\247\001\001\000\006\025\264\026" +
    "\265\001\001\000\004\031\257\001\001\000\010\015\245" +
    "\016\051\027\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\255\052\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\263\030\262\052\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\264\026\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\271\054\270" +
    "\001\001\000\040\005\272\007\035\011\024\014\031\017" +
    "\021\023\017\032\043\034\033\035\015\036\042\040\037" +
    "\041\013\045\020\046\016\047\027\001\001\000\002\001" +
    "\001\000\004\055\273\001\001\000\006\006\274\054\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\277\052\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\203\016\051\020\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private JTextArea txt_terminal = WindowMain.txt_terminal;
  int ident = 0;
  private String code = "";
  private ArrayList<TraductorGo> metodos_list = new ArrayList();
  private void agregarMetodo(TraductorGo m){
    metodos_list.add(m);
  }
  private ArrayList<TraductorGo> getMetodos(){
    return metodos_list;
  }
  public String getCode(){
    return code;
  }
  ArrayList<TokenError> listadoErroresSintacticos = new ArrayList();
	
	@Override
	public void syntax_error(Symbol a){
		Token tokenError = (Token) a.value;//lo transformamos en token para obtener su lexema, fila y columna		
		String msgError = "Se esperaba: ";	
		
                
		int linea = (tokenError != null) ? tokenError.getLine() : 0;
		int columna = (tokenError != null) ? tokenError.getColumn() : 0;

		if(a.sym == sym.EOF){
			System.out.println("END OF FILE");
			TokenError tokenErrorAux = new TokenError("ERROR SINTACTICO", "Etiqueta de cierre",
                                                 "La etiqueta de cierre debe ser <C_GCIC>", -1, -1);
			listadoErroresSintacticos.add(tokenErrorAux);
		}else{
      for(int i = 0; i < expected_token_ids().size(); i++){
        msgError += symbl_name_from_id(expected_token_ids().get(i)) + " ";
        if(i < expected_token_ids().size() - 1)
          msgError = msgError + ", ";			
      }
      String errorSin = "<<<SINTAX ERROR:GO>>>: linea: "+
                        +tokenError.getLine()+" columna: "+tokenError.getColumn()+" MENSAJE: " + msgError 
                        + " pero se obtuvo: " + tokenError.getLexeme() + " de tipo: " + tokenError.getType();
      TokenError tokenErrorAux = new TokenError(msgError, tokenError.getLexeme(), "ERROR SINTACTICO", linea, columna);
      txt_terminal.append(errorSin+"\n");
      listadoErroresSintacticos.add(tokenErrorAux);
    }
  }
  public void report_error(String message, Object info) {
    System.out.println("Reportar Error:GO");
  }
    
	public void report_fatal_error(String message, Object info) {
    txt_terminal.append("Error Fatal:GO: " + info + "\n");
  }

	public void aumentarIdentacion(){
		ident++;
	}

	public void reducirIdentacion(){
		ident--;
	}

	public int getIdentacion(){
		return this.ident;
	}

  protected int error_sync_size() {
      return 1;
  }
  private void crearCodigo(String codi){
    code = codi;
  }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserGo$actions {
  private final ParserGo parser;

  /** Constructor */
  CUP$ParserGo$actions(ParserGo parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserGo$do_action_part00000000(
    int                        CUP$ParserGo$act_num,
    java_cup.runtime.lr_parser CUP$ParserGo$parser,
    java.util.Stack            CUP$ParserGo$stack,
    int                        CUP$ParserGo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGo$result;

      /* select the action based on the action number */
      switch (CUP$ParserGo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		RESULT = start_val;
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserGo$parser.done_parsing();
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= body 
            {
              Object RESULT =null;

              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= R_INICIO bloque_instrucciones R_FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<TraductorGo> a = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaInstruccionesGo l = new ListaInstruccionesGo(a, getIdentacion());
                                Go p = new Go(l);
                                p.setMetodos(getMetodos());
                                crearCodigo(p.generarCodigoGo());
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              ArrayList<TraductorGo> RESULT =null;
aumentarIdentacion();
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              ArrayList<TraductorGo> RESULT =(ArrayList<TraductorGo>) ((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		TraductorGo a = (TraductorGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
reducirIdentacion();
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque_instrucciones ::= NT$0 instruccion NT$1 otra_instruccion 
            {
              ArrayList<TraductorGo> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ArrayList<TraductorGo>) ((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		TraductorGo a = (TraductorGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<TraductorGo> b = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ArrayList<TraductorGo> instrucciones = new ArrayList();
                                if(a != null)
                                  instrucciones.add(a);
                                if(b != null)
                                  instrucciones.addAll(b);
                                RESULT = instrucciones;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("bloque_instrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque_instrucciones ::= 
            {
              ArrayList<TraductorGo> RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("bloque_instrucciones",2, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= declaracion 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		DeclaracionGo a = (DeclaracionGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= asignacion 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		AsignacionGo a = (AsignacionGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= condicional_si 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		CondicionSiGo a = (CondicionSiGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= condicional_segun 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		CondicionSegunGo a = (CondicionSegunGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= ciclo_para 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		CicloParaGo a = (CicloParaGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= ciclo_mientras 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		CicloMientrasGo a = (CicloMientrasGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= ciclo_repetir_hasta 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		CicloRepetirGo a = (CicloRepetirGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= retorno 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		RetornoGo a = (RetornoGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= metodos 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		MetodoGo a = (MetodoGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                agregarMetodo(a);
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= funciones 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		FuncionGo a = (FuncionGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                agregarMetodo(a);
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= imprimir 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ImprimirGo a = (ImprimirGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= imprimirln 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ImprimirLnGo a = (ImprimirLnGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= ejecutar_metodo 
            {
              TraductorGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		EjecutarGo a = (EjecutarGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= error 
            {
              TraductorGo RESULT =null;

              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              ArrayList<TraductorGo> RESULT =null;
aumentarIdentacion();
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              ArrayList<TraductorGo> RESULT =(ArrayList<TraductorGo>) ((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		TraductorGo a = (TraductorGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
reducirIdentacion();
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // otra_instruccion ::= NT$2 instruccion NT$3 otra_instruccion 
            {
              ArrayList<TraductorGo> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ArrayList<TraductorGo>) ((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		TraductorGo a = (TraductorGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<TraductorGo> b = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ArrayList<TraductorGo> instrucciones = new ArrayList();
                                if(a != null)
                                  instrucciones.add(a);
                                instrucciones.addAll(b);
                                RESULT = instrucciones;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otra_instruccion",4, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // otra_instruccion ::= 
            {
              ArrayList<TraductorGo> RESULT =null;
		
                                RESULT = new ArrayList();
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otra_instruccion",4, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= R_INGRESAR variables R_COMO tipo_dato R_CONVALOR expresion_asignacion PTO_COMA 
            {
              DeclaracionGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)).right;
		ListaVariablesGo a = (ListaVariablesGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ListaValoresGo c = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                DeclaracionGo d = new DeclaracionGo(b,c,a, getIdentacion()); 
                                txt_terminal.append(d.generarCodigoGo()+"\n");
                                RESULT = d; 
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-6)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variables ::= VALUE_ID otra_variable 
            {
              ListaVariablesGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> variables = new ArrayList();
                                ValorElementoGo valor = new ValorElementoGo(a.getLexeme(),"var");
                                variables.add(valor);
                                if(b != null)
                                  variables.addAll(b);
                                ListaVariablesGo l = new ListaVariablesGo(variables);
                                l.setVariables(variables);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // otra_variable ::= COMA VALUE_ID otra_variable 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> valores = new ArrayList();
                                ValorElementoGo valor = new ValorElementoGo(a.getLexeme(),"var");
                                valores.add(valor);
                                if(b != null)
                                  valores.addAll(b);
                                RESULT = valores; 
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otra_variable",8, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // otra_variable ::= 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otra_variable",8, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_dato ::= R_BOOL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_dato ::= R_CHAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato ::= R_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_dato ::= R_NUMBER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 RESULT = a.getLexeme(); 
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_asignacion ::= operacion_general 
            {
              ListaValoresGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ListaValoresGo l = new ListaValoresGo(a);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("expresion_asignacion",6, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= variables FLECHA expresion_asignacion PTO_COMA 
            {
              AsignacionGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		ListaVariablesGo a = (ListaVariablesGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ListaValoresGo b = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                AsignacionGo asig = new AsignacionGo(a,b, getIdentacion());
                                txt_terminal.append(asig.generarCodigoGo()+"\n");
                                RESULT = asig;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacion_general ::= operacion_general AND operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("and", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacion_general ::= operacion_general OR operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("or", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion_general ::= NOT operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                ValorElementoGo v = new ValorElementoGo("not", "operacion");
                                l.add(v);
                                l.addAll(a);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacion_general ::= operacion_general MAYOR operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("mayor", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operacion_general ::= operacion_general MENOR operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("menor", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operacion_general ::= operacion_general MAYOR_O operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("mayor_o_igual", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operacion_general ::= operacion_general MENOR_O operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("menor_o_igual", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operacion_general ::= operacion_general DIFERENTE operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("es_diferente", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operacion_general ::= operacion_general ES_IGUAL operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("es_igual", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operacion_general ::= operacion_general SUMA operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("+", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operacion_general ::= operacion_general RESTA operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("-", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operacion_general ::= operacion_general PRODUCTO operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("*", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacion_general ::= operacion_general MODULO operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("mod", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacion_general ::= operacion_general POTENCIA CORCHETE_I operacion_general CORCHETE_D 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                ListaValoresGo la = new ListaValoresGo(a);
                                ListaValoresGo lb = new ListaValoresGo(b);
                                String oper = "math.Pow(float64("+la.generarCodigoGo()+"),float64("+lb.generarCodigoGo()+"))";
                                ValorElementoGo ele = new ValorElementoGo(oper,"valor");
                                l.add(ele);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacion_general ::= operacion_general DIVISION operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.addAll(a);
                                ValorElementoGo v = new ValorElementoGo("/", "operacion");
                                l.add(v);
                                l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacion_general ::= valor_primario 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ValorElementoGo a = (ValorElementoGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                l.add(a);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacion_general ::= RESTA operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                ValorElementoGo v = new ValorElementoGo("-", "operacion");
                                l.add(v);
                                l.addAll(a);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacion_general ::= PARENTESIS_I operacion_general PARENTESIS_D 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ArrayList<ValorElementoGo> l = new ArrayList();
                                ValorElementoGo v1 = new ValorElementoGo("(","parI");
                                l.add(v1);
                                l.addAll(a);
                                ValorElementoGo v2 = new ValorElementoGo(")","parD");
                                l.add(v2);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("operacion_general",11, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor_primario ::= VALUE_ID 
            {
              ValorElementoGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 RESULT = new ValorElementoGo(a.getLexeme(),"var"); 
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("valor_primario",12, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor_primario ::= VALUE_NUMERO 
            {
              ValorElementoGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 RESULT = new ValorElementoGo(a.getLexeme(), "numero"); 
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("valor_primario",12, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor_primario ::= VALUE_STRING 
            {
              ValorElementoGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 RESULT = new ValorElementoGo(a.getLexeme(), "cadena"); 
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("valor_primario",12, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor_primario ::= VALUE_CHAR 
            {
              ValorElementoGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                              Pattern patron = Pattern.compile("\'\\$\\{(?<CHART>[0-9]{1,3})\\}\'");
                              Matcher matcher = patron.matcher(a.getLexeme());
                              if(matcher.find()){
                                  char c = (char)Integer.parseInt(matcher.group("CHART"));
                                  RESULT = new ValorElementoGo("'"+String.valueOf(c)+"'", "caracter");
                              }else{
                                  RESULT = new ValorElementoGo(a.getLexeme(),"caracter");
                              }
                            
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("valor_primario",12, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor_primario ::= VALUE_BOOL 
            {
              ValorElementoGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		 RESULT = new ValorElementoGo(a.getLexeme(), "boolean"); 
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("valor_primario",12, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valor_primario ::= R_EJECUTAR VALUE_ID PARENTESIS_I lista_parametros PARENTESIS_D 
            {
              ValorElementoGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ListaParametrosGo b = (ListaParametrosGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                String s = a.getLexeme()+ "(";
                                if(b != null)
                                  s += b.generarCodigoGo();
                                s+= ")";
                                RESULT = new ValorElementoGo(s,"funcion");
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("valor_primario",12, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicional_si ::= R_SI condicion R_ENTONCES bloque_instrucciones osi_condiciones delo_contrario R_FINSI 
            {
              CondicionSiGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)).right;
		ListaValoresGo a = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		ArrayList<TraductorGo> b = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<CondicionOSiGo> c = (ArrayList<CondicionOSiGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		SiDeLoContrarioGo d = (SiDeLoContrarioGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaOsiCondicionGo losi = new ListaOsiCondicionGo(c,getIdentacion());
                                ListaInstruccionesGo ins = new ListaInstruccionesGo(b,getIdentacion());
                                CondicionSiGo cond = new CondicionSiGo(a,losi,d,ins,getIdentacion());
                                txt_terminal.append(cond.generarCodigoGo()+"\n");
                                RESULT = cond;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("condicional_si",13, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-6)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= operacion_general 
            {
              ListaValoresGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ListaValoresGo l = new ListaValoresGo(a);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // osi_condiciones ::= R_OSI condicion R_ENTONCES bloque_instrucciones osi_condiciones 
            {
              ArrayList<CondicionOSiGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		ListaValoresGo a = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<TraductorGo> b = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<CondicionOSiGo> c = (ArrayList<CondicionOSiGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ArrayList<CondicionOSiGo> osis = new ArrayList();
                                ListaInstruccionesGo ins = new ListaInstruccionesGo(b, getIdentacion());
                                CondicionOSiGo osi = new CondicionOSiGo(a,ins,getIdentacion());
                                osis.add(osi);
                                if(c != null)
                                  osis.addAll(c);
                                RESULT = osis;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("osi_condiciones",15, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // osi_condiciones ::= 
            {
              ArrayList<CondicionOSiGo> RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("osi_condiciones",15, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // delo_contrario ::= R_DELOCONTRARIO bloque_instrucciones 
            {
              SiDeLoContrarioGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<TraductorGo> a = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ListaInstruccionesGo ins = new ListaInstruccionesGo(a, getIdentacion());
                                SiDeLoContrarioGo s = new SiDeLoContrarioGo(ins,getIdentacion());
                                RESULT = s; 
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("delo_contrario",16, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // delo_contrario ::= 
            {
              SiDeLoContrarioGo RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("delo_contrario",16, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicional_segun ::= R_SEGUN valor_segun R_HACER opciones_segun delo_contrario_segun R_FINSEGUN 
            {
              CondicionSegunGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<OpcionSegunGo> b = (ArrayList<OpcionSegunGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		DeLoContrarioSegunGo c = (DeLoContrarioSegunGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaValoresGo lv = new ListaValoresGo(a);
                                /*for(OpcionSegunGo op: b){
                                  op.setComparacion(lv);
                                }*/
                                ListaOpcionSegunGo lop = new ListaOpcionSegunGo(b);
                                CondicionSegunGo cs = new CondicionSegunGo(lop,c,lv,getIdentacion());
                                txt_terminal.append(cs.generarCodigoGo() + "\n");
                                RESULT = cs;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("condicional_segun",17, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instrucciones_segun ::= bloque_instrucciones 
            {
              ArrayList<TraductorGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<TraductorGo> a = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("instrucciones_segun",22, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor_segun ::= operacion_general 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("valor_segun",21, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opciones_segun ::= opcion_segun otra_opcion_segun 
            {
              ArrayList<OpcionSegunGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		OpcionSegunGo a = (OpcionSegunGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<OpcionSegunGo> b = (ArrayList<OpcionSegunGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ArrayList<OpcionSegunGo> l = new ArrayList();
                                a.setTipo(0);
                                l.add(a);
                                if(b != null)
                                  l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("opciones_segun",18, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opcion_segun ::= INTERROGANTE_I valor_segun INTERROGANTE_D R_ENTONCES bloque_instrucciones 
            {
              OpcionSegunGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<TraductorGo> b = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ListaInstruccionesGo l = new ListaInstruccionesGo(b, getIdentacion());
                                ListaValoresGo lv = new ListaValoresGo(a);
                                OpcionSegunGo op = new OpcionSegunGo(lv,l,getIdentacion(),1);
                                RESULT = op;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("opcion_segun",19, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // otra_opcion_segun ::= opcion_segun otra_opcion_segun 
            {
              ArrayList<OpcionSegunGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		OpcionSegunGo a = (OpcionSegunGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<OpcionSegunGo> b = (ArrayList<OpcionSegunGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ArrayList<OpcionSegunGo> l = new ArrayList();
                                l.add(a);
                                if(b != null)
                                  l.addAll(b);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otra_opcion_segun",20, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // otra_opcion_segun ::= 
            {
              ArrayList<OpcionSegunGo> RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otra_opcion_segun",20, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // delo_contrario_segun ::= R_DELOCONTRARIO R_ENTONCES instrucciones_segun 
            {
              DeLoContrarioSegunGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<TraductorGo> a = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ListaInstruccionesGo l = new ListaInstruccionesGo(a, getIdentacion());
                                DeLoContrarioSegunGo dl = new DeLoContrarioSegunGo(l, getIdentacion());
                                RESULT = dl;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("delo_contrario_segun",23, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // delo_contrario_segun ::= 
            {
              DeLoContrarioSegunGo RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("delo_contrario_segun",23, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ciclo_para ::= R_PARA VALUE_ID FLECHA operacion_general R_HASTA operacion_general con_incremento R_HACER bloque_instrucciones R_FINPARA 
            {
              CicloParaGo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-8)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-6)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		ListaValoresGo c = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<TraductorGo> d = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ValorElementoGo id = new ValorElementoGo(i.getLexeme(),"id");
                                ListaValoresGo ini = new ListaValoresGo(a);
                                ListaValoresGo fini = new ListaValoresGo(b);
                                ListaValoresGo paso = c;
                                ListaInstruccionesGo inst = new ListaInstruccionesGo(d, getIdentacion());
                                CicloParaGo cic = new CicloParaGo(id,ini,fini,paso,inst,getIdentacion());
                                txt_terminal.append(cic.generarCodigoGo() + "\n");
                                RESULT = cic;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("ciclo_para",24, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-9)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // con_incremento ::= R_CON R_INCREMENTO operacion_general 
            {
              ListaValoresGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = new ListaValoresGo(a);
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("con_incremento",25, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // con_incremento ::= 
            {
              ListaValoresGo RESULT =null;
		
                               RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("con_incremento",25, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ciclo_mientras ::= R_MIENTRAS condicion R_HACER bloque_instrucciones R_FINMIENTRAS 
            {
              CicloMientrasGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		ListaValoresGo a = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<TraductorGo> b = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaInstruccionesGo inst = new ListaInstruccionesGo(b, getIdentacion());
                                ListaValoresGo cond = a;
                                CicloMientrasGo mien = new CicloMientrasGo(cond,inst,getIdentacion());
                                txt_terminal.append(mien.generarCodigoGo() + "\n");
                                RESULT = mien;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("ciclo_mientras",26, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ciclo_repetir_hasta ::= R_REPETIR bloque_instrucciones R_HASTAQUE condicion 
            {
              CicloRepetirGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ArrayList<TraductorGo> a = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ListaValoresGo b = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ListaValoresGo cond = b;
                                ListaInstruccionesGo inst = new ListaInstruccionesGo(a,getIdentacion());
                                CicloRepetirGo cr = new CicloRepetirGo(cond,inst,getIdentacion());
                                txt_terminal.append(cr.generarCodigoGo() + "\n");
                                RESULT = cr;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("ciclo_repetir_hasta",27, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // retorno ::= R_RETORNAR retorno_val PTO_COMA 
            {
              RetornoGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ListaValoresGo a = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaValoresGo l = a;
                                RetornoGo r = new RetornoGo(a,getIdentacion());
                                txt_terminal.append(r.generarCodigoGo() + "\n");
                                RESULT = r;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("retorno",28, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // retorno_val ::= condicion 
            {
              ListaValoresGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ListaValoresGo a = (ListaValoresGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = a;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("retorno_val",29, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // metodos ::= R_METODO VALUE_ID con_parametros bloque_instrucciones R_FINMETODO 
            {
              MetodoGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ListaIngresoParametrosGo b = (ListaIngresoParametrosGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<TraductorGo> c = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaIngresoParametrosGo l = b;
                                ListaInstruccionesGo li = new ListaInstruccionesGo(c, getIdentacion());
                                MetodoGo met = new MetodoGo(a.getLexeme(),l,li,getIdentacion());
                                txt_terminal.append(met.generarCodigoGo()+"\n");
                                RESULT = met;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("metodos",30, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funciones ::= R_FUNCION VALUE_ID tipo_dato con_parametros bloque_instrucciones R_FINFUNCION 
            {
              FuncionGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ListaIngresoParametrosGo c = (ListaIngresoParametrosGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<TraductorGo> d = (ArrayList<TraductorGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaIngresoParametrosGo l = c;
                                ListaInstruccionesGo li = new ListaInstruccionesGo(d, getIdentacion());
                                FuncionGo fun = new FuncionGo(b,a.getLexeme(),l,li,getIdentacion());
                                txt_terminal.append(fun.generarCodigoGo() + "\n");
                                RESULT = fun;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("funciones",31, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ejecutar_metodo ::= R_EJECUTAR VALUE_ID PARENTESIS_I lista_parametros PARENTESIS_D PTO_COMA 
            {
              EjecutarGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ListaParametrosGo b = (ListaParametrosGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		
                                EjecutarGo e = new EjecutarGo(a.getLexeme(), b, getIdentacion());
                                txt_terminal.append(e.generarCodigoGo() + "\n");
                                RESULT = e;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("ejecutar_metodo",37, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-5)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_parametros ::= operacion_general otro_param 
            {
              ListaParametrosGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ArrayList<ValorElementoGo> valores = new ArrayList();
                                ListaValoresGo l = new ListaValoresGo(a);
                                ValorElementoGo valor = new ValorElementoGo(l.generarCodigoGo(),"valor");
                                valores.add(valor);
                                if(b != null)
                                  valores.addAll(b);
                                ListaParametrosGo l2 = new ListaParametrosGo(valores);
                                RESULT = l2;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("lista_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_parametros ::= 
            {
              ListaParametrosGo RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("lista_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // otro_param ::= COMA operacion_general otro_param 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ValorElementoGo> b = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ArrayList<ValorElementoGo> valores = new ArrayList();
                                ListaValoresGo l = new ListaValoresGo(a);
                                ValorElementoGo valor = new ValorElementoGo(l.generarCodigoGo(),"valor");
                                valores.add(valor);
                                if(b != null)
                                  valores.addAll(b);
                                RESULT = valores; 
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otro_param",39, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // otro_param ::= 
            {
              ArrayList<ValorElementoGo> RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otro_param",39, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // con_parametros ::= R_CONPARAMETROS PARENTESIS_I parametro otro_parametro PARENTESIS_D 
            {
              ListaIngresoParametrosGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).right;
		ParametroGo a = (ParametroGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<ParametroGo> b = (ArrayList<ParametroGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ArrayList<ParametroGo> par = new ArrayList();
                                par.add(a);
                                if(b != null)
                                  par.addAll(b);
                                ListaIngresoParametrosGo l = new ListaIngresoParametrosGo(par);
                                RESULT = l;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("con_parametros",32, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // con_parametros ::= 
            {
              ListaIngresoParametrosGo RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("con_parametros",32, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametro ::= VALUE_ID tipo_dato 
            {
              ParametroGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                RESULT = new ParametroGo(a.getLexeme(), b);
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("parametro",33, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // otro_parametro ::= COMA parametro otro_parametro 
            {
              ArrayList<ParametroGo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ParametroGo a = (ParametroGo)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()).right;
		ArrayList<ParametroGo> b = (ArrayList<ParametroGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.peek()).value;
		
                                ArrayList<ParametroGo> par = new ArrayList();
                                par.add(a);
                                if(b != null)
                                  par.addAll(b);
                                RESULT = par;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otro_parametro",34, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // otro_parametro ::= 
            {
              ArrayList<ParametroGo> RESULT =null;
		
                                RESULT = null;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("otro_parametro",34, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // imprimir ::= R_IMPRIMIR operacion_general PTO_COMA 
            {
              ImprimirGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaValoresGo l = new ListaValoresGo(a);
                                ImprimirGo i = new ImprimirGo(l, getIdentacion());
                                txt_terminal.append(i.generarCodigoGo() + "\n");
                                RESULT = i;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // imprimirln ::= R_IMPRIMIRLN operacion_general PTO_COMA 
            {
              ImprimirLnGo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).right;
		ArrayList<ValorElementoGo> a = (ArrayList<ValorElementoGo>)((java_cup.runtime.Symbol) CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-1)).value;
		
                                ListaValoresGo l = new ListaValoresGo(a);
                                ImprimirLnGo i = new ImprimirLnGo(l, getIdentacion());
                                txt_terminal.append(i.generarCodigoGo() + "\n");
                                RESULT = i;
                              
              CUP$ParserGo$result = parser.getSymbolFactory().newSymbol("imprimirln",36, ((java_cup.runtime.Symbol)CUP$ParserGo$stack.elementAt(CUP$ParserGo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGo$stack.peek()), RESULT);
            }
          return CUP$ParserGo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserGo$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserGo$do_action(
    int                        CUP$ParserGo$act_num,
    java_cup.runtime.lr_parser CUP$ParserGo$parser,
    java.util.Stack            CUP$ParserGo$stack,
    int                        CUP$ParserGo$top)
    throws java.lang.Exception
    {
              return CUP$ParserGo$do_action_part00000000(
                               CUP$ParserGo$act_num,
                               CUP$ParserGo$parser,
                               CUP$ParserGo$stack,
                               CUP$ParserGo$top);
    }
}

}
