/* The following code was generated by JFlex 1.7.0 */

package analyzer;
import java_cup.runtime.*;
import static analyzer.sym.*;

import dao.Token;
import dao.TokenError;
import java.util.ArrayList;
import javax.swing.JTextArea;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\30\2\6\1\3\1\4\1\3\1\3\22\30\1\33\1\27\1\23"+
    "\1\27\1\34\2\27\1\32\1\7\1\10\1\2\1\51\1\16\1\11"+
    "\1\22\1\1\12\21\1\27\1\15\2\27\1\12\1\14\1\27\1\43"+
    "\1\66\1\56\1\42\1\40\1\45\1\61\1\63\1\57\1\65\1\31"+
    "\1\46\1\52\1\55\1\44\1\53\1\64\1\41\1\47\1\54\1\62"+
    "\1\37\2\31\1\60\1\31\1\17\1\27\1\20\1\27\1\50\1\27"+
    "\1\43\1\66\1\56\1\42\1\40\1\45\1\61\1\63\1\57\1\65"+
    "\1\31\1\46\1\52\1\55\1\44\1\53\1\64\1\41\1\47\1\54"+
    "\1\62\1\37\2\31\1\60\1\31\1\35\1\27\1\36\1\27\6\0"+
    "\1\5\71\0\1\13\2\0\1\13\37\0\1\24\160\0\1\26\u1ed4\0"+
    "\1\5\1\5\202\0\1\25\udf50\0\1\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\22\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\14\1"+
    "\1\17\7\1\1\20\1\0\1\21\15\0\1\22\5\0"+
    "\1\23\20\0\1\16\1\24\2\0\1\25\10\0\1\26"+
    "\2\0\1\27\2\0\1\30\3\0\1\31\3\0\1\32"+
    "\4\0\1\33\10\0\1\34\13\0\1\35\10\0\1\36"+
    "\4\0\1\37\11\0\1\34\11\0\1\40\5\0\1\41"+
    "\1\0\1\42\1\43\13\0\1\44\1\45\14\0\1\46"+
    "\4\0\1\47\4\0\1\50\1\0\1\51\4\0\1\52"+
    "\10\0\1\53\7\0\1\54\13\0\1\55\1\0\1\56"+
    "\1\57\1\60\1\61\5\0\1\62\2\0\1\63\1\64"+
    "\1\65\2\0\1\66\1\0\1\67\4\0\1\70\4\0"+
    "\1\71\3\0\1\72\3\0\1\73\10\0\1\74\4\0"+
    "\1\75\1\76\1\77\1\0\1\100\4\0\1\101\1\102"+
    "\2\0\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\67\0\67\0\67\0\245"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\334\0\u0113"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\67\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\67\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\67\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\67\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u0596\0\67\0\u0ce4\0\u0113\0\67\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\67"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\67\0\u0fe6\0\u101d"+
    "\0\u1054\0\67\0\u108b\0\u10c2\0\u10f9\0\67\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\67\0\u13fb\0\u1432\0\u1469\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\67"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\67\0\u1810\0\u1847\0\u187e\0\u18b5\0\67\0\u18ec\0\u1923"+
    "\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1aa4"+
    "\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u1c93\0\67\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\67"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e"+
    "\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\67"+
    "\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\67\0\u23aa\0\u23e1\0\u2418"+
    "\0\u244f\0\67\0\u2486\0\u24bd\0\u24f4\0\u252b\0\67\0\u2562"+
    "\0\67\0\u2599\0\u25d0\0\u2607\0\u263e\0\67\0\u2675\0\u26ac"+
    "\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\67\0\u282d"+
    "\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\67\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66"+
    "\0\u2b9d\0\u2bd4\0\67\0\u2c0b\0\67\0\67\0\67\0\67"+
    "\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\67\0\u2d55\0\u2d8c"+
    "\0\67\0\67\0\67\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\67"+
    "\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\67\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\u3020\0\67\0\u3057\0\u308e\0\u30c5\0\67\0\u30fc\0\u3133"+
    "\0\u316a\0\67\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4"+
    "\0\u32eb\0\u3322\0\67\0\u3359\0\u3390\0\u33c7\0\u33fe\0\67"+
    "\0\67\0\67\0\u3435\0\67\0\u346c\0\u34a3\0\u34da\0\u3511"+
    "\0\67\0\67\0\u3548\0\u357f\0\67\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\2\1\20\1\21\5\2\1\22\1\5\3\2"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\2"+
    "\1\32\1\33\1\34\1\35\1\36\1\2\1\37\1\40"+
    "\1\41\3\2\1\42\2\2\1\43\70\0\1\44\1\45"+
    "\76\0\1\46\75\0\1\17\1\47\45\0\4\50\1\0"+
    "\5\50\1\0\4\50\1\51\2\50\4\0\40\50\25\0"+
    "\1\52\42\0\2\53\4\0\4\53\1\0\10\53\3\0"+
    "\1\53\1\0\3\53\1\54\32\53\40\0\1\55\75\0"+
    "\1\56\5\0\1\57\7\0\1\60\41\0\1\61\66\0"+
    "\1\62\103\0\1\63\52\0\1\64\6\0\1\65\61\0"+
    "\1\66\13\0\1\67\2\0\1\70\44\0\1\71\16\0"+
    "\1\72\30\0\1\73\7\0\1\73\5\0\11\73\2\0"+
    "\15\73\40\0\1\74\2\0\1\75\1\76\12\0\1\77"+
    "\52\0\1\100\1\101\66\0\1\102\15\0\1\103\47\0"+
    "\1\104\1\105\74\0\1\106\2\0\1\107\54\0\1\110"+
    "\67\0\1\111\22\0\3\44\3\0\61\44\2\45\1\112"+
    "\64\45\21\0\1\113\46\0\4\50\1\0\5\50\1\0"+
    "\4\50\1\51\2\50\1\114\1\115\2\0\40\50\3\0"+
    "\2\51\1\0\1\51\21\0\1\51\1\50\1\0\1\51"+
    "\3\0\11\50\2\0\15\50\26\0\1\116\72\0\1\117"+
    "\66\0\1\117\2\0\1\120\72\0\1\121\75\0\1\122"+
    "\72\0\1\123\52\0\1\124\101\0\1\125\1\126\62\0"+
    "\1\127\60\0\1\130\73\0\1\131\65\0\1\132\75\0"+
    "\1\133\66\0\1\134\72\0\1\135\26\0\1\73\7\0"+
    "\1\73\5\0\11\73\1\136\1\0\15\73\54\0\1\137"+
    "\1\140\71\0\1\141\50\0\1\142\64\0\1\143\67\0"+
    "\1\144\101\0\1\145\66\0\1\146\64\0\1\147\55\0"+
    "\1\150\1\151\76\0\1\152\2\0\1\153\64\0\1\154"+
    "\71\0\1\155\1\156\1\0\1\157\54\0\1\160\6\0"+
    "\1\161\54\0\1\162\22\0\1\163\1\164\1\165\64\163"+
    "\25\0\1\166\62\0\1\167\107\0\1\170\66\0\1\171"+
    "\14\0\1\172\53\0\1\173\100\0\1\174\50\0\1\175"+
    "\72\0\1\176\70\0\1\177\77\0\1\200\56\0\1\201"+
    "\67\0\1\202\74\0\1\203\72\0\1\204\50\0\1\205"+
    "\66\0\1\206\66\0\1\207\77\0\1\210\54\0\1\211"+
    "\63\0\1\212\66\0\1\213\71\0\1\214\63\0\1\215"+
    "\72\0\1\216\72\0\1\217\57\0\1\220\66\0\1\221"+
    "\103\0\1\222\51\0\1\223\101\0\1\224\52\0\1\225"+
    "\74\0\1\226\20\0\1\45\1\227\1\112\65\45\1\230"+
    "\1\112\64\45\26\0\1\114\61\0\1\231\14\0\1\53"+
    "\73\0\1\232\102\0\1\233\70\0\1\234\62\0\1\235"+
    "\73\0\1\236\60\0\1\237\53\0\1\240\71\0\1\241"+
    "\66\0\1\242\67\0\1\243\1\0\1\244\2\0\1\245"+
    "\1\246\72\0\1\247\64\0\1\250\53\0\1\251\65\0"+
    "\1\252\66\0\1\253\101\0\1\254\67\0\1\255\52\0"+
    "\1\256\103\0\1\257\65\0\1\260\50\0\1\261\13\0"+
    "\1\262\72\0\1\263\47\0\1\264\105\0\1\265\47\0"+
    "\1\266\71\0\1\267\64\0\1\270\65\0\1\271\27\0"+
    "\1\163\106\0\1\272\14\0\1\53\72\0\1\273\71\0"+
    "\1\274\103\0\1\275\62\0\1\276\64\0\1\277\71\0"+
    "\1\300\64\0\1\301\61\0\1\302\100\0\1\303\44\0"+
    "\1\304\16\0\1\305\47\0\1\306\16\0\1\307\52\0"+
    "\1\310\67\0\1\311\66\0\1\312\72\0\1\313\66\0"+
    "\1\314\57\0\1\315\103\0\1\316\54\0\1\317\76\0"+
    "\1\320\55\0\1\321\66\0\1\322\66\0\1\323\75\0"+
    "\1\324\66\0\1\325\60\0\1\326\71\0\1\327\67\0"+
    "\1\330\61\0\1\331\61\0\1\53\70\0\1\332\66\0"+
    "\1\333\71\0\1\334\63\0\1\335\71\0\1\336\64\0"+
    "\1\337\70\0\1\340\101\0\1\341\65\0\1\342\72\0"+
    "\1\343\61\0\1\344\52\0\1\345\67\0\1\346\102\0"+
    "\1\347\55\0\1\350\66\0\1\351\65\0\1\352\102\0"+
    "\1\353\47\0\1\354\74\0\1\355\61\0\1\356\104\0"+
    "\1\357\47\0\1\360\71\0\1\361\107\0\1\362\57\0"+
    "\1\363\52\0\1\201\66\0\1\364\73\0\1\365\67\0"+
    "\1\366\60\0\1\367\66\0\1\370\71\0\1\371\100\0"+
    "\1\372\72\0\1\373\50\0\1\374\77\0\1\375\54\0"+
    "\1\376\73\0\1\377\66\0\1\u0100\65\0\1\u0101\62\0"+
    "\1\u0102\64\0\1\u0103\71\0\1\u0104\65\0\1\u0105\64\0"+
    "\1\u0106\102\0\1\u0107\52\0\1\u0108\107\0\1\u0109\44\0"+
    "\1\u010a\103\0\1\u010b\70\0\1\u010c\64\0\1\u010d\53\0"+
    "\1\u010e\100\0\1\u010f\71\0\1\u0110\66\0\1\u0111\50\0"+
    "\1\u0112\77\0\1\u0113\64\0\1\u0114\72\0\1\u0115\52\0"+
    "\1\u0116\103\0\1\u0117\65\0\1\u0118\56\0\1\u0119\66\0"+
    "\1\u011a\63\0\1\u011b\106\0\1\u011c\66\0\1\u011d\45\0"+
    "\1\u011e\103\0\1\u011f\54\0\1\u0120\77\0\1\u0121\53\0"+
    "\1\u0122\102\0\1\u0123\54\0\1\u0124\105\0\1\u0125\66\0"+
    "\1\u0126\60\0\1\u0127\60\0\1\u0128\66\0\1\u0129\60\0"+
    "\1\u012a\71\0\1\u012b\72\0\1\u012c\62\0\1\u012d\66\0"+
    "\1\u012e\64\0\1\u012f\66\0\1\u0130\73\0\1\u0131\66\0"+
    "\1\u0132\64\0\1\u0133\101\0\1\u0134\56\0\1\u0135\63\0"+
    "\1\u0136\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\4\11\1\1\6\11\15\1\1\11"+
    "\10\1\1\0\1\11\15\0\1\11\5\0\1\11\20\0"+
    "\1\1\1\11\2\0\1\11\10\0\1\11\2\0\1\1"+
    "\2\0\1\11\3\0\1\11\3\0\1\11\4\0\1\1"+
    "\10\0\1\11\13\0\1\11\10\0\1\11\4\0\1\11"+
    "\11\0\1\1\11\0\1\11\5\0\1\11\1\0\2\1"+
    "\13\0\1\1\1\11\14\0\1\11\4\0\1\11\4\0"+
    "\1\11\1\0\1\11\4\0\1\11\10\0\1\11\7\0"+
    "\1\11\13\0\1\11\1\0\4\11\5\0\1\11\2\0"+
    "\3\11\2\0\1\1\1\0\1\11\4\0\1\11\4\0"+
    "\1\11\3\0\1\11\3\0\1\11\10\0\1\11\4\0"+
    "\3\11\1\0\1\11\4\0\2\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    ArrayList<TokenError> errors = new ArrayList<>();
    JTextArea txt_terminal;
    private Symbol returnSymbol(int type, String typeToken, String lexeme, int line, int column){
        Token aux = new Token(lexeme, typeToken, line, column);
        //txt_terminal.append(aux+"\n");
        //System.out.println(aux);
        return new Symbol(type, aux);
    }

    private void addErrorLex(String message, String typeToken, String lexeme, int line, int column){
        TokenError error = new TokenError(message, lexeme, typeToken, line, column);
        String errorLex = "<<<LEXICAL ERROR>>>: " + lexeme + " en linea: " + line + " columna: " + column;
        txt_terminal.append(errorLex + "\n");
        System.out.println(errorLex);
        errors.add(error);
    }
    
    public ArrayList<TokenError> getErrors(){
        return errors;
    }
    public void setTerminal(JTextArea txt){
        txt_terminal = txt;
    }
    private void imprimirComentario(String msg){
        txt_terminal.append(msg+"\n");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addErrorLex("LEX", "INVALID TOKEN", yytext(), yyline + 1, yycolumn + 1);
            } 
            // fall through
          case 69: break;
          case 2: 
            { return returnSymbol(DIVISION        , "DIVISION"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 70: break;
          case 3: 
            { return returnSymbol(PRODUCTO        , "PRODUCTO"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 71: break;
          case 4: 
            { /*                                 SON IGNORADOS                                        */
            } 
            // fall through
          case 72: break;
          case 5: 
            { return returnSymbol(PARENTESIS_I    , "PARENTESIS_I"    , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 73: break;
          case 6: 
            { return returnSymbol(PARENTESIS_D    , "PARENTESIS_D"    , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 74: break;
          case 7: 
            { return returnSymbol(RESTA           , "RESTA"           , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 75: break;
          case 8: 
            { return returnSymbol(INTERROGANTE_I  , "INTERROGANTE_I"  , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 76: break;
          case 9: 
            { return returnSymbol(INTERROGANTE_D  , "INTERROGANTE_D"  , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 77: break;
          case 10: 
            { return returnSymbol(PTO_COMA        , "PTO_COMA"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 78: break;
          case 11: 
            { return returnSymbol(COMA            , "COMA"            , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 79: break;
          case 12: 
            { return returnSymbol(CORCHETE_I      , "CORCHETE_I"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 80: break;
          case 13: 
            { return returnSymbol(CORCHETE_D      , "CORCHETE_D"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 81: break;
          case 14: 
            { return returnSymbol(VALUE_NUMERO    , "VALUE_NUMERO"    , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 82: break;
          case 15: 
            { return returnSymbol(SUMA            , "SUMA"            , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 83: break;
          case 16: 
            { imprimirComentario("CL:" + yytext() + "\nLINE:" + (yyline + 1) + " COL:" + (yycolumn + 1));
            } 
            // fall through
          case 84: break;
          case 17: 
            { return returnSymbol(FLECHA          , "FLECHA"          , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 85: break;
          case 18: 
            { return returnSymbol(OR              , "OR"              , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 86: break;
          case 19: 
            { return returnSymbol(R_SI            , "R_SI"            , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 87: break;
          case 20: 
            { return returnSymbol(VALUE_STRING    , "VALUE_STRING"    , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 88: break;
          case 21: 
            { return returnSymbol(VALUE_CHAR      , "VALUE_CHAR"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 89: break;
          case 22: 
            { return returnSymbol(AND             , "AND"             , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 90: break;
          case 23: 
            { return returnSymbol(R_FIN           , "R_FIN"           , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 91: break;
          case 24: 
            { return returnSymbol(VALUE_ID        , "VALUE_ID"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 92: break;
          case 25: 
            { return returnSymbol(MODULO          , "MODULO"          , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 93: break;
          case 26: 
            { return returnSymbol(NOT             , "NOT"             , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 94: break;
          case 27: 
            { return returnSymbol(R_CON           , "R_CON"           , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 95: break;
          case 28: 
            { imprimirComentario("CB:" + yytext() + "\nLINE:" + (yyline + 1) + " COL:" + (yycolumn + 1));
            } 
            // fall through
          case 96: break;
          case 29: 
            { return returnSymbol(R_OSI           , "R_OSI"           , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 97: break;
          case 30: 
            { return returnSymbol(R_PARA          , "R_PARA"          , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 98: break;
          case 31: 
            { return returnSymbol(R_COMO          , "R_COMO"          , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 99: break;
          case 32: 
            { return returnSymbol(VALUE_BOOL      , "VALUE_BOOL"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 100: break;
          case 33: 
            { return returnSymbol(R_SEGUN         , "R_SEGUN"         , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 101: break;
          case 34: 
            { return returnSymbol(MENOR           , "MENOR"           , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 102: break;
          case 35: 
            { return returnSymbol(MAYOR           , "MAYOR"           , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 103: break;
          case 36: 
            { return returnSymbol(R_HASTA         , "R_HASTA"         , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 104: break;
          case 37: 
            { return returnSymbol(R_HACER         , "R_HACER"         , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 105: break;
          case 38: 
            { return returnSymbol(R_FINSI         , "R_FINSI"         , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 106: break;
          case 39: 
            { return returnSymbol(R_METODO        , "R_METODO"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 107: break;
          case 40: 
            { return returnSymbol(R_NUMBER        , "R_NUMBER"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 108: break;
          case 41: 
            { return returnSymbol(R_STRING        , "R_STRING"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 109: break;
          case 42: 
            { return returnSymbol(R_INICIO        , "R_INICIO"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 110: break;
          case 43: 
            { return returnSymbol(R_REPETIR       , "R_REPETIR"       , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 111: break;
          case 44: 
            { return returnSymbol(R_FUNCION       , "R_FUNCION"       , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 112: break;
          case 45: 
            { return returnSymbol(R_BOOL          , "R_BOOL"          , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 113: break;
          case 46: 
            { return returnSymbol(ES_IGUAL        , "ES_IGUAL"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 114: break;
          case 47: 
            { return returnSymbol(R_ENTONCES      , "R_ENTONCES"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 115: break;
          case 48: 
            { return returnSymbol(R_EJECUTAR      , "R_EJECUTAR"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 116: break;
          case 49: 
            { return returnSymbol(R_RETORNAR      , "R_RETORNAR"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 117: break;
          case 50: 
            { return returnSymbol(R_FINPARA       , "R_FINPARA"       , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 118: break;
          case 51: 
            { return returnSymbol(R_MIENTRAS      , "R_MIENTRAS"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 119: break;
          case 52: 
            { return returnSymbol(POTENCIA        , "POTENCIA"        , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 120: break;
          case 53: 
            { return returnSymbol(R_CHAR          , "R_CHAR"          , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 121: break;
          case 54: 
            { return returnSymbol(R_IMPRIMIR      , "R_IMPRIMIR"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 122: break;
          case 55: 
            { return returnSymbol(R_INGRESAR      , "R_INGRESAR"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 123: break;
          case 56: 
            { return returnSymbol(R_FINSEGUN      , "R_FINSEGUN"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 124: break;
          case 57: 
            { return returnSymbol(R_CONVALOR      , "R_CONVALOR"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 125: break;
          case 58: 
            { return returnSymbol(R_HASTAQUE      , "R_HASTAQUE"      , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 126: break;
          case 59: 
            { return returnSymbol(R_FINMETODO     , "R_FINMETODO"     , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 127: break;
          case 60: 
            { return returnSymbol(R_FINFUNCION    , "R_FINFUNCION"    , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 128: break;
          case 61: 
            { return returnSymbol(R_IMPRIMIRLN    , "R_IMPRIMIRLN"    , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 129: break;
          case 62: 
            { return returnSymbol(R_INCREMENTO    , "R_INCREMENTO"    , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 130: break;
          case 63: 
            { return returnSymbol(DIFERENTE       , "DIFERENTE"       , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 131: break;
          case 64: 
            { return returnSymbol(R_FINMIENTRAS   , "R_FINMIENTRAS"   , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 132: break;
          case 65: 
            { return returnSymbol(MENOR_O         , "MENOR_O"         , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 133: break;
          case 66: 
            { return returnSymbol(MAYOR_O         , "MAYOR_O"         , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 134: break;
          case 67: 
            { return returnSymbol(R_CONPARAMETROS , "R_CONPARAMETROS" , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 135: break;
          case 68: 
            { return returnSymbol(R_DELOCONTRARIO , "R_DELOCONTRARIO" , yytext(), yyline+1, yycolumn+1);
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
