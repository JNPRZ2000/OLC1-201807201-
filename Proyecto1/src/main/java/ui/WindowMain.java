/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import analyzer.Lexer;
import analyzer.ParserGo;
import analyzer.ParserPy;
import dao.SintaxError;
import dao.TokenError;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.BadLocationException;
import java.text.Normalizer;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.Document;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import org.apache.tools.ant.taskdefs.Available;

/**
 *
 * @author perez
 */
public class WindowMain extends javax.swing.JFrame {

    /**
     * Creates new form WindowMain
     */
    public WindowMain() {
        this.code_python = "";
        this.code_go = "";
        this.lex_er = "";
        this.sin_er = "";

        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pane_botttom = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        btn_run = new javax.swing.JButton();
        btn_clean = new javax.swing.JButton();
        btn_py = new javax.swing.JButton();
        btn_go = new javax.swing.JButton();
        btn_clean_terminal = new javax.swing.JButton();
        split_pane = new javax.swing.JSplitPane();
        scroll_pane_lines = new javax.swing.JScrollPane();
        txt_lines = new javax.swing.JTextArea();
        scroll_pane_code = new javax.swing.JScrollPane();
        txt_code = new javax.swing.JTextArea();
        scroll_pane_terminal = new javax.swing.JScrollPane();
        txt_terminal = new javax.swing.JTextArea();
        info = new javax.swing.JLabel();
        men_bar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        item_open = new javax.swing.JMenuItem();
        item_save = new javax.swing.JMenuItem();
        item_saveas = new javax.swing.JMenuItem();
        menu_view = new javax.swing.JMenu();
        item_usser_manual = new javax.swing.JMenuItem();
        item_technical_manual = new javax.swing.JMenuItem();
        menu_report = new javax.swing.JMenu();
        item_flowchart = new javax.swing.JMenuItem();
        item_errors = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto Uno");

        btn_run.setText("Run");
        btn_run.setFocusable(false);
        btn_run.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_run.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_runActionPerformed(evt);
            }
        });
        toolbar.add(btn_run);

        btn_clean.setText("Clean");
        btn_clean.setFocusable(false);
        btn_clean.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_clean.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btn_clean);

        btn_py.setText("PY");
        btn_py.setFocusable(false);
        btn_py.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_py.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_py.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pyActionPerformed(evt);
            }
        });
        toolbar.add(btn_py);

        btn_go.setText("GO");
        btn_go.setFocusable(false);
        btn_go.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_go.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_goActionPerformed(evt);
            }
        });
        toolbar.add(btn_go);

        btn_clean_terminal.setText("Limpiar Terminal");
        btn_clean_terminal.setFocusable(false);
        btn_clean_terminal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_clean_terminal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_clean_terminal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clean_terminalActionPerformed(evt);
            }
        });
        toolbar.add(btn_clean_terminal);

        split_pane.setDividerLocation(40);
        split_pane.setDividerSize(2);

        scroll_pane_lines.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll_pane_lines.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txt_lines.setEditable(false);
        txt_lines.setColumns(20);
        txt_lines.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        txt_lines.setRows(5);
        txt_lines.setFocusable(false);
        scroll_pane_lines.setViewportView(txt_lines);

        split_pane.setLeftComponent(scroll_pane_lines);

        scroll_pane_code.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll_pane_code.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        txt_code.setColumns(20);
        txt_code.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        txt_code.setRows(5);
        txt_code.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_codeKeyPressed(evt);
            }
        });
        scroll_pane_code.setViewportView(txt_code);

        split_pane.setRightComponent(scroll_pane_code);

        scroll_pane_terminal.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scroll_pane_terminal.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        txt_terminal.setEditable(false);
        txt_terminal.setColumns(20);
        txt_terminal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_terminal.setRows(5);
        scroll_pane_terminal.setViewportView(txt_terminal);

        info.setText(" ");

        javax.swing.GroupLayout pane_botttomLayout = new javax.swing.GroupLayout(pane_botttom);
        pane_botttom.setLayout(pane_botttomLayout);
        pane_botttomLayout.setHorizontalGroup(
            pane_botttomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pane_botttomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pane_botttomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll_pane_terminal)
                    .addComponent(split_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 993, Short.MAX_VALUE)
                    .addGroup(pane_botttomLayout.createSequentialGroup()
                        .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pane_botttomLayout.setVerticalGroup(
            pane_botttomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_botttomLayout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(split_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info)
                .addGap(3, 3, 3)
                .addComponent(scroll_pane_terminal, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        menu_file.setText("File");

        item_open.setText("Open");
        item_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_openActionPerformed(evt);
            }
        });
        menu_file.add(item_open);

        item_save.setText("Save");
        item_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_saveActionPerformed(evt);
            }
        });
        menu_file.add(item_save);

        item_saveas.setText("Save as...");
        item_saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_saveasActionPerformed(evt);
            }
        });
        menu_file.add(item_saveas);

        men_bar.add(menu_file);

        menu_view.setText("View");

        item_usser_manual.setText("Usser Manual");
        menu_view.add(item_usser_manual);

        item_technical_manual.setText("Technical Manual");
        menu_view.add(item_technical_manual);

        men_bar.add(menu_view);

        menu_report.setText("Report");

        item_flowchart.setText("Flowchart");
        menu_report.add(item_flowchart);

        item_errors.setText("Errors");
        item_errors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_errorsActionPerformed(evt);
            }
        });
        menu_report.add(item_errors);

        men_bar.add(menu_report);

        setJMenuBar(men_bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pane_botttom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pane_botttom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void item_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_openActionPerformed
        // TODO add your handling code here:
        System.out.println("OPEN");
        this.open();
    }//GEN-LAST:event_item_openActionPerformed

    private void btn_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_runActionPerformed
        // TODO add your handling code here:
        this.runCode();
    }//GEN-LAST:event_btn_runActionPerformed

    private void btn_clean_terminalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clean_terminalActionPerformed
        // TODO add your handling code here:
        this.txt_terminal.setText("");
    }//GEN-LAST:event_btn_clean_terminalActionPerformed

    private void item_saveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_saveasActionPerformed
        // TODO add your handling code here:
        System.out.println("SAVE_AS");
        this.save_As();

    }//GEN-LAST:event_item_saveasActionPerformed

    private void item_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_saveActionPerformed
        // TODO add your handling code here:
        this.save();
    }//GEN-LAST:event_item_saveActionPerformed

    private void txt_codeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_codeKeyPressed
        // TODO add your handling code here:
        if (evt.isControlDown()) {
            if (evt.getKeyCode() == KeyEvent.VK_S) {
                this.save();
            }
            if (evt.getKeyCode() == KeyEvent.VK_A) {
                this.open();
            }
            if (evt.getKeyCode() == KeyEvent.VK_R) {
                this.runCode();
            }
        }
    }//GEN-LAST:event_txt_codeKeyPressed

    private void btn_pyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pyActionPerformed
        // TODO add your handling code here:
        FileSystemView vSystema = FileSystemView.getFileSystemView();
        JFileChooser fc = new JFileChooser(vSystema);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT", "txt", "TXT");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(filter);
        int selection = fc.showSaveDialog(this);
        if (selection == JFileChooser.APPROVE_OPTION) {
            try {
                File fn = new File(fc.getSelectedFile() + ".txt");
                FileWriter fw = new FileWriter(fn);
                fw.write(code_python);
                fw.close();
                current_file = fn;
                JOptionPane.showMessageDialog(this, "Archivo Guardado", "SAVE AS...", JOptionPane.PLAIN_MESSAGE);
                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + fn.getAbsolutePath());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_pyActionPerformed

    private void btn_goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_goActionPerformed
        // TODO add your handling code here:
        FileSystemView vSystema = FileSystemView.getFileSystemView();
        JFileChooser fc = new JFileChooser(vSystema);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT", "txt", "TXT");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(filter);
        int selection = fc.showSaveDialog(this);
        if (selection == JFileChooser.APPROVE_OPTION) {
            try {
                File fn = new File(fc.getSelectedFile() + ".txt");
                FileWriter fw = new FileWriter(fn);
                fw.write(code_go);
                fw.close();
                JOptionPane.showMessageDialog(this, "Archivo Guardado", "SAVE AS...", JOptionPane.PLAIN_MESSAGE);
                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + fn.getAbsolutePath());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_goActionPerformed

    private void item_errorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_errorsActionPerformed
        // TODO add your handling code here:
        this.guardarErr(lex_er);
        this.guardarErr(sin_er);
    }//GEN-LAST:event_item_errorsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clean;
    private javax.swing.JButton btn_clean_terminal;
    private javax.swing.JButton btn_go;
    private javax.swing.JButton btn_py;
    private javax.swing.JButton btn_run;
    private javax.swing.JLabel info;
    private javax.swing.JMenuItem item_errors;
    private javax.swing.JMenuItem item_flowchart;
    private javax.swing.JMenuItem item_open;
    private javax.swing.JMenuItem item_save;
    private javax.swing.JMenuItem item_saveas;
    private javax.swing.JMenuItem item_technical_manual;
    private javax.swing.JMenuItem item_usser_manual;
    private javax.swing.JMenuBar men_bar;
    private javax.swing.JMenu menu_file;
    private javax.swing.JMenu menu_report;
    private javax.swing.JMenu menu_view;
    private javax.swing.JPanel pane_botttom;
    private javax.swing.JScrollPane scroll_pane_code;
    private javax.swing.JScrollPane scroll_pane_lines;
    private javax.swing.JScrollPane scroll_pane_terminal;
    private javax.swing.JSplitPane split_pane;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JTextArea txt_code;
    private javax.swing.JTextArea txt_lines;
    public static javax.swing.JTextArea txt_terminal;
    // End of variables declaration//GEN-END:variables
    private int lines;
    private UndoManager undoManager;
    private File current_file;
    private String code_python;
    private String code_go;
    private String lex_er;
    private String sin_er;

    private void guardarErr(String err) {
        FileSystemView vSystema = FileSystemView.getFileSystemView();
        JFileChooser fc = new JFileChooser(vSystema);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TXT", "txt", "TXT");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(filter);
        int selection = fc.showSaveDialog(this);
        if (selection == JFileChooser.APPROVE_OPTION) {
            try {
                File fn = new File(fc.getSelectedFile() + ".txt");
                FileWriter fw = new FileWriter(fn);
                fw.write(err);
                fw.close();
                JOptionPane.showMessageDialog(this, "Archivo Guardado", "SAVE AS...", JOptionPane.PLAIN_MESSAGE);
                Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + fn.getAbsolutePath());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void runCode() {
        String entry = txt_code.getText();
        try {
            String entryc = new String(entry.getBytes("ISO-8859-1"), "UTF-8");
            String entryn = Normalizer.normalize(entry, Normalizer.Form.NFD).
                    replaceAll("\\p{InCombiningDiacriticalMarks}+", "");
            System.out.println("TEXTO A ANALIZAR:\n" + entryn);

            StringReader sr = new StringReader(entryn);
            Lexer lexer = new Lexer(sr);
            //lexer.setTerminal(txt_terminal);
            ParserPy parse = new ParserPy(lexer);
            //parse.setTerminal(txt_terminal);

            StringReader sr2 = new StringReader(entryn);
            Lexer lexer2 = new Lexer(sr2);
            //lexer.setTerminal(txt_terminal);
            ParserGo parseGo = new ParserGo(lexer2);
            //parseGo.setTerminal(txt_terminal);

            try {
                parse.parse();
                parseGo.parse();
                code_python = parse.getCode();
                code_go = parseGo.getCode();

                ArrayList<TokenError> errores_token = lexer.getErrors();
                String[] lineas = txt_code.getText().split("\n");
                lex_er = "";
                int cont = 0;
                for (int i = 0; i < lineas.length; i++) {
                    lex_er += lineas[i] + "\n";
                    while (cont < errores_token.size() && errores_token.get(cont).getLine() == i + 1) {
                        lex_er += "//" + errores_token.get(cont) + "\n";
                        cont++;
                    }
                }
                cont = 0;
                sin_er = "";
                ArrayList<SintaxError> ersi = parse.getErrores();
                for (int i = 0; i < lineas.length; i++) {
                    sin_er += lineas[i] + "\n";
                    while (cont < ersi.size() && ersi.get(cont).getLine() == i + 1) {
                        sin_er += "//" + ersi.get(cont) + "\n";
                        cont++;
                    }
                    if (cont < ersi.size() && ersi.get(cont).getLine() == -1) {
                        sin_er += "//F " + ersi.get(cont) + "\n";
                    }
                }

                //txt_terminal.setText("");
            } catch (Exception ex) {
                System.out.println("Error en la ejecucion del parser " + ex.getMessage());
                ex.printStackTrace();
            }
            System.out.println("<<< PARSER EJECUTADO >>>");
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(WindowMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex2) {
            System.out.println("Error al ejecutar el lexer o parser: " + ex2.getLocalizedMessage());
        }
    }

    private void guardarErrores(String contenido) {

    }

    private void open() {
        FileSystemView vSystema = FileSystemView.getFileSystemView();
        JFileChooser fc = new JFileChooser(vSystema);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("OLC", "olc", "OLC");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(filter);
        int selection = fc.showOpenDialog(this);
        if (selection == JFileChooser.APPROVE_OPTION) {
            try {
                File f = fc.getSelectedFile();
                current_file = f;
                txt_code.setText("");
                Scanner sc = new Scanner(f);
                while (sc.hasNext()) {
                    txt_code.append(sc.nextLine());
                    if (sc.hasNext()) {
                        txt_code.append("\n");
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(WindowMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void save() {
        if (current_file != null && current_file.exists()) {
            try {
                FileWriter fw = new FileWriter(current_file);
                fw.write(txt_code.getText());
                fw.close();
                JOptionPane.showMessageDialog(this, "ARCHIVO GUARDADO", "SAVE", JOptionPane.PLAIN_MESSAGE);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            this.save_As();
        }
    }

    private void save_As() {
        FileSystemView vSystema = FileSystemView.getFileSystemView();
        JFileChooser fc = new JFileChooser(vSystema);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("OLC", "olc", "OLC");
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(filter);
        int selection = fc.showSaveDialog(this);
        if (selection == JFileChooser.APPROVE_OPTION) {
            try {
                File fn = new File(fc.getSelectedFile() + ".olc");
                FileWriter fw = new FileWriter(fn);
                fw.write(txt_code.getText());
                fw.close();
                current_file = fn;
                JOptionPane.showMessageDialog(this, "Archivo Guardado", "SAVE AS...", JOptionPane.PLAIN_MESSAGE);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void initComponentsCustom() {
        current_file = null;
        try {
            //BufferedImage b_i = ImageIO.read(new File("src/main/resources/play.png"));
            //Image img = b_i.getScaledInstance(29, 29, Image.SCALE_DEFAULT);
            ImageIcon icon = new ImageIcon("src/main/resources/play.png");
            btn_run.setIcon(icon);
            //btn_run.setIconTextGap(10);

            //BufferedImage b = ImageIO.read(new File("src/main/resources/clean.png"));
            //Image image = b.getScaledInstance(20, 20, Image.SCALE_DEFAULT);
            ImageIcon icon2 = new ImageIcon("src/main/resources/clean.png");
            btn_clean.setIcon(icon2);
            //btn_clean.setIconTextGap(10);

            BufferedImage open = ImageIO.read(new File("src/main/resources/folder.png"));
            Image openi = open.getScaledInstance(15, 15, Image.SCALE_DEFAULT);
            ImageIcon openic = new ImageIcon(openi);
            item_open.setIcon(openic);

            BufferedImage save = ImageIO.read(new File("src/main/resources/diskette.png"));
            Image savei = save.getScaledInstance(15, 15, Image.SCALE_DEFAULT);
            ImageIcon saveic = new ImageIcon(savei);
            item_save.setIcon(saveic);

            BufferedImage saveas = ImageIO.read(new File("src/main/resources/save-as.png"));
            Image saveasi = saveas.getScaledInstance(15, 15, Image.SCALE_DEFAULT);
            ImageIcon saveasic = new ImageIcon(saveasi);
            item_saveas.setIcon(saveasic);

            BufferedImage usser = ImageIO.read(new File("src/main/resources/usser.png"));
            Image usseri = usser.getScaledInstance(15, 15, Image.SCALE_DEFAULT);
            ImageIcon usseric = new ImageIcon(usseri);
            item_usser_manual.setIcon(usseric);

            BufferedImage tech = ImageIO.read(new File("src/main/resources/technical.png"));
            Image techi = tech.getScaledInstance(15, 15, Image.SCALE_DEFAULT);
            ImageIcon techic = new ImageIcon(techi);
            item_technical_manual.setIcon(techic);

            BufferedImage flow = ImageIO.read(new File("src/main/resources/flowchart.png"));
            Image flowi = flow.getScaledInstance(15, 15, Image.SCALE_DEFAULT);
            ImageIcon flowic = new ImageIcon(flowi);
            item_flowchart.setIcon(flowic);

            BufferedImage error = ImageIO.read(new File("src/main/resources/error.png"));
            Image errori = error.getScaledInstance(15, 15, Image.SCALE_DEFAULT);
            ImageIcon erroric = new ImageIcon(errori);
            item_errors.setIcon(erroric);

            ImageIcon goic = new ImageIcon("src/main/resources/golang.png");
            btn_go.setIcon(goic);

            ImageIcon pyic = new ImageIcon("src/main/resources/python.png");
            btn_py.setIcon(pyic);

        } catch (IOException e) {
            System.out.println("ERROR IMAGE BTN: " + e);
        }
        info.setText("Linea: 1 Columna: 1");
        txt_lines.append("1");
        this.lines = 0;
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        toolbar.setFloatable(false);
        scroll_pane_code.getVerticalScrollBar().addAdjustmentListener(
                new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                scroll_pane_lines.getVerticalScrollBar().setValue(
                        scroll_pane_code.getVerticalScrollBar().getValue()
                );
            }
        }
        );
        txt_code.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                int pos = e.getDot();
                try {
                    int row = txt_code.getLineOfOffset(pos) + 1;
                    int col = pos - txt_code.getLineStartOffset(row - 1) + 1;
                    info.setText("Linea: " + row + " Columna: " + col);
                    if (txt_code.getLineCount() + 1 != lines) {
                        lines = txt_code.getLineCount() + 1;
                        txt_lines.setText("");
                        for (int i = 1; i < lines; i++) {
                            txt_lines.append(String.valueOf(i));
                            if (i < lines - 1) {
                                txt_lines.append("\n");
                            }
                        }
                    }

                } catch (BadLocationException ex) {
                    Logger.getLogger(WindowMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        undoManager = new UndoManager();
        Document doc = txt_code.getDocument();
        doc.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.addEdit(e.getEdit());
            }
        });
        InputMap im = txt_code.getInputMap(JComponent.WHEN_FOCUSED);
        ActionMap am = txt_code.getActionMap();
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Undo");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Redo");
        am.put("Undo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManager.canUndo()) {
                        undoManager.undo();
                    }
                } catch (CannotUndoException ex1) {
                    ex1.printStackTrace();
                }
            }
        });
        am.put("Redo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManager.canRedo()) {
                        undoManager.redo();
                    }
                } catch (CannotRedoException ex2) {
                    ex2.printStackTrace();
                }
            }
        });
    }

}
